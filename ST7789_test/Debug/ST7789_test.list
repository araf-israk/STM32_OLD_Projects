
ST7789_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003428  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c88  08006c88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c90  08006c90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08006ca8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08006ca8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0cd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1b  00000000  00000000  0002a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006eb  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ab3  00000000  00000000  0002ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adff  00000000  00000000  0004293e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087d52  00000000  00000000  0004d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024cc  00000000  00000000  000d5490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000d795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003848 	.word	0x08003848

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003848 	.word	0x08003848

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <LCD_Writ_Bus>:
      ����˵����LCD��������д�뺯��(software SPI)
      ������ݣ�dat  Ҫд��Ĵ�������
      ����ֵ��  ��
******************************************************************************/
void LCD_Writ_Bus(u8 dat)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	//hard SPI
//	HAL_SPI_Transmit(&hspi1,&dat,1,1);

	SPI2_TX_completed_flag = 0;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <LCD_Writ_Bus+0x30>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, &dat, 1);
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	4807      	ldr	r0, [pc, #28]	; (8000508 <LCD_Writ_Bus+0x34>)
 80004ec:	f002 fe54 	bl	8003198 <HAL_SPI_Transmit_DMA>
	while (SPI2_TX_completed_flag == 0);
 80004f0:	bf00      	nop
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <LCD_Writ_Bus+0x30>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0fb      	beq.n	80004f2 <LCD_Writ_Bus+0x1e>
		}
		LCD_SCLK_Set();
		dat<<=1;
	}
	*/
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000000 	.word	0x20000000
 8000508:	2000004c 	.word	0x2000004c

0800050c <LCD_WR_DATA8>:
      ����˵����LCDд������
      ������ݣ�dat д�������
      ����ֵ��  ��
******************************************************************************/
void LCD_WR_DATA8(u8 dat)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	LCD_Writ_Bus(dat);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffdb 	bl	80004d4 <LCD_Writ_Bus>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <LCD_WR_DATA>:
      ����˵����LCDд������
      ������ݣ�dat д�������
      ����ֵ��  ��
******************************************************************************/
void LCD_WR_DATA(u16 dat)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
//	LCD_Writ_Bus(dat>>8);
//	LCD_Writ_Bus(dat);
	uint8_t temp[2];
	temp[0]=(dat>>8)&0xff;
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2db      	uxtb	r3, r3
 800053a:	733b      	strb	r3, [r7, #12]
	temp[1]=dat&0xff;
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	737b      	strb	r3, [r7, #13]
//	HAL_SPI_Transmit(&hspi1,temp,2,1);

	SPI2_TX_completed_flag = 0;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <LCD_WR_DATA+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, &temp[0], 1);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <LCD_WR_DATA+0x68>)
 8000552:	f002 fe21 	bl	8003198 <HAL_SPI_Transmit_DMA>
	while (SPI2_TX_completed_flag == 0);
 8000556:	bf00      	nop
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <LCD_WR_DATA+0x64>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0fb      	beq.n	8000558 <LCD_WR_DATA+0x30>

	SPI2_TX_completed_flag = 0;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <LCD_WR_DATA+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, &temp[1], 1);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	3301      	adds	r3, #1
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <LCD_WR_DATA+0x68>)
 8000572:	f002 fe11 	bl	8003198 <HAL_SPI_Transmit_DMA>
	while (SPI2_TX_completed_flag == 0);
 8000576:	bf00      	nop
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LCD_WR_DATA+0x64>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0fb      	beq.n	8000578 <LCD_WR_DATA+0x50>
//	LCD_Writ_Bus(temp[0]);
//	LCD_Writ_Bus(temp[1]);


}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	2000004c 	.word	0x2000004c

08000594 <LCD_WR_REG>:
      ����˵����LCDд������
      ������ݣ�dat д�������
      ����ֵ��  ��
******************************************************************************/
void LCD_WR_REG(u8 dat)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();//д����
 800059e:	2200      	movs	r2, #0
 80005a0:	2104      	movs	r1, #4
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <LCD_WR_REG+0x30>)
 80005a4:	f001 fdfe 	bl	80021a4 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff92 	bl	80004d4 <LCD_Writ_Bus>
	LCD_DC_Set();//д����
 80005b0:	2201      	movs	r2, #1
 80005b2:	2104      	movs	r1, #4
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <LCD_WR_REG+0x30>)
 80005b6:	f001 fdf5 	bl	80021a4 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <LCD_Address_Set>:
      ������ݣ�x1,x2 �����е���ʼ�ͽ�����ַ
                y1,y2 �����е���ʼ�ͽ�����ַ
      ����ֵ��  ��
******************************************************************************/
void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4604      	mov	r4, r0
 80005d0:	4608      	mov	r0, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	4623      	mov	r3, r4
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	4603      	mov	r3, r0
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	807b      	strh	r3, [r7, #2]
 80005e2:	4613      	mov	r3, r2
 80005e4:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);//�е�ַ����
 80005e6:	202a      	movs	r0, #42	; 0x2a
 80005e8:	f7ff ffd4 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA(x1);
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff9a 	bl	8000528 <LCD_WR_DATA>
	LCD_WR_DATA(x2);
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff96 	bl	8000528 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);//�е�ַ����
 80005fc:	202b      	movs	r0, #43	; 0x2b
 80005fe:	f7ff ffc9 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA(y1);
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff8f 	bl	8000528 <LCD_WR_DATA>
	LCD_WR_DATA(y2);
 800060a:	883b      	ldrh	r3, [r7, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff8b 	bl	8000528 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);//������д
 8000612:	202c      	movs	r0, #44	; 0x2c
 8000614:	f7ff ffbe 	bl	8000594 <LCD_WR_REG>
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}

08000620 <LCD_Set_Light>:
      ����˵����LCD���ڱ���
      ������ݣ�dc,ռ�ձ�,5%~100%
      ����ֵ��  ��
******************************************************************************/
void LCD_Set_Light(uint8_t dc)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
//	if(dc>=5 && dc<=100)
//		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,dc*PWM_PERIOD/100);
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <ST7789_SPI_Init>:
      ����ֵ��  ��


******************************************************************************/
void ST7789_SPI_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	//Peripherials initializations are unnecessary when using code generated by CubeMX


	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);		//CS OFF
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <ST7789_SPI_Init+0x14>)
 8000642:	f001 fdaf 	bl	80021a4 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400

08000650 <ILI9341_Enable>:


void ILI9341_Enable(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_PORT, RES_PIN, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2102      	movs	r1, #2
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <ILI9341_Enable+0x14>)
 800065a:	f001 fda3 	bl	80021a4 <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020400 	.word	0x40020400

08000668 <LCD_Init>:


void LCD_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
//	LCD_GPIO_Init();//��ʼ��GPIO
	ILI9341_Enable();
 800066c:	f7ff fff0 	bl	8000650 <ILI9341_Enable>
	ST7789_SPI_Init();
 8000670:	f7ff ffe2 	bl	8000638 <ST7789_SPI_Init>
	LCD_CS_Clr();		//chip select
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	4865      	ldr	r0, [pc, #404]	; (8000810 <LCD_Init+0x1a8>)
 800067a:	f001 fd93 	bl	80021a4 <HAL_GPIO_WritePin>

	LCD_RES_Clr();	//��λ
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4863      	ldr	r0, [pc, #396]	; (8000810 <LCD_Init+0x1a8>)
 8000684:	f001 fd8e 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 ff3f 	bl	800150c <HAL_Delay>
	LCD_RES_Set();
 800068e:	2201      	movs	r2, #1
 8000690:	2102      	movs	r1, #2
 8000692:	485f      	ldr	r0, [pc, #380]	; (8000810 <LCD_Init+0x1a8>)
 8000694:	f001 fd86 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000698:	2064      	movs	r0, #100	; 0x64
 800069a:	f000 ff37 	bl	800150c <HAL_Delay>

	LCD_WR_REG(0x11);
 800069e:	2011      	movs	r0, #17
 80006a0:	f7ff ff78 	bl	8000594 <LCD_WR_REG>
	HAL_Delay(120);
 80006a4:	2078      	movs	r0, #120	; 0x78
 80006a6:	f000 ff31 	bl	800150c <HAL_Delay>
	LCD_WR_REG(0x36);
 80006aa:	2036      	movs	r0, #54	; 0x36
 80006ac:	f7ff ff72 	bl	8000594 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff2b 	bl	800050c <LCD_WR_DATA8>
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
	else LCD_WR_DATA8(0xA0);

	LCD_WR_REG(0x3A);
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f7ff ff6c 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 80006bc:	2005      	movs	r0, #5
 80006be:	f7ff ff25 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xB2);
 80006c2:	20b2      	movs	r0, #178	; 0xb2
 80006c4:	f7ff ff66 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x0C);
 80006c8:	200c      	movs	r0, #12
 80006ca:	f7ff ff1f 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0C);
 80006ce:	200c      	movs	r0, #12
 80006d0:	f7ff ff1c 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff19 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33);
 80006da:	2033      	movs	r0, #51	; 0x33
 80006dc:	f7ff ff16 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33);
 80006e0:	2033      	movs	r0, #51	; 0x33
 80006e2:	f7ff ff13 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xB7);
 80006e6:	20b7      	movs	r0, #183	; 0xb7
 80006e8:	f7ff ff54 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x35);
 80006ec:	2035      	movs	r0, #53	; 0x35
 80006ee:	f7ff ff0d 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xBB);
 80006f2:	20bb      	movs	r0, #187	; 0xbb
 80006f4:	f7ff ff4e 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x19);
 80006f8:	2019      	movs	r0, #25
 80006fa:	f7ff ff07 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xC0);
 80006fe:	20c0      	movs	r0, #192	; 0xc0
 8000700:	f7ff ff48 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x2C);
 8000704:	202c      	movs	r0, #44	; 0x2c
 8000706:	f7ff ff01 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xC2);
 800070a:	20c2      	movs	r0, #194	; 0xc2
 800070c:	f7ff ff42 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x01);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fefb 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xC3);
 8000716:	20c3      	movs	r0, #195	; 0xc3
 8000718:	f7ff ff3c 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x12);
 800071c:	2012      	movs	r0, #18
 800071e:	f7ff fef5 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xC4);
 8000722:	20c4      	movs	r0, #196	; 0xc4
 8000724:	f7ff ff36 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x20);
 8000728:	2020      	movs	r0, #32
 800072a:	f7ff feef 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xC6);
 800072e:	20c6      	movs	r0, #198	; 0xc6
 8000730:	f7ff ff30 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0x0F);
 8000734:	200f      	movs	r0, #15
 8000736:	f7ff fee9 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xD0);
 800073a:	20d0      	movs	r0, #208	; 0xd0
 800073c:	f7ff ff2a 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0xA4);
 8000740:	20a4      	movs	r0, #164	; 0xa4
 8000742:	f7ff fee3 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0xA1);
 8000746:	20a1      	movs	r0, #161	; 0xa1
 8000748:	f7ff fee0 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xE0);
 800074c:	20e0      	movs	r0, #224	; 0xe0
 800074e:	f7ff ff21 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0xD0);
 8000752:	20d0      	movs	r0, #208	; 0xd0
 8000754:	f7ff feda 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 8000758:	2004      	movs	r0, #4
 800075a:	f7ff fed7 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0D);
 800075e:	200d      	movs	r0, #13
 8000760:	f7ff fed4 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x11);
 8000764:	2011      	movs	r0, #17
 8000766:	f7ff fed1 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 800076a:	2013      	movs	r0, #19
 800076c:	f7ff fece 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2B);
 8000770:	202b      	movs	r0, #43	; 0x2b
 8000772:	f7ff fecb 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3F);
 8000776:	203f      	movs	r0, #63	; 0x3f
 8000778:	f7ff fec8 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x54);
 800077c:	2054      	movs	r0, #84	; 0x54
 800077e:	f7ff fec5 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x4C);
 8000782:	204c      	movs	r0, #76	; 0x4c
 8000784:	f7ff fec2 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x18);
 8000788:	2018      	movs	r0, #24
 800078a:	f7ff febf 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0D);
 800078e:	200d      	movs	r0, #13
 8000790:	f7ff febc 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0B);
 8000794:	200b      	movs	r0, #11
 8000796:	f7ff feb9 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1F);
 800079a:	201f      	movs	r0, #31
 800079c:	f7ff feb6 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x23);
 80007a0:	2023      	movs	r0, #35	; 0x23
 80007a2:	f7ff feb3 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0xE1);
 80007a6:	20e1      	movs	r0, #225	; 0xe1
 80007a8:	f7ff fef4 	bl	8000594 <LCD_WR_REG>
	LCD_WR_DATA8(0xD0);
 80007ac:	20d0      	movs	r0, #208	; 0xd0
 80007ae:	f7ff fead 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 80007b2:	2004      	movs	r0, #4
 80007b4:	f7ff feaa 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0C);
 80007b8:	200c      	movs	r0, #12
 80007ba:	f7ff fea7 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x11);
 80007be:	2011      	movs	r0, #17
 80007c0:	f7ff fea4 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 80007c4:	2013      	movs	r0, #19
 80007c6:	f7ff fea1 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2C);
 80007ca:	202c      	movs	r0, #44	; 0x2c
 80007cc:	f7ff fe9e 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3F);
 80007d0:	203f      	movs	r0, #63	; 0x3f
 80007d2:	f7ff fe9b 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x44);
 80007d6:	2044      	movs	r0, #68	; 0x44
 80007d8:	f7ff fe98 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x51);
 80007dc:	2051      	movs	r0, #81	; 0x51
 80007de:	f7ff fe95 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2F);
 80007e2:	202f      	movs	r0, #47	; 0x2f
 80007e4:	f7ff fe92 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1F);
 80007e8:	201f      	movs	r0, #31
 80007ea:	f7ff fe8f 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1F);
 80007ee:	201f      	movs	r0, #31
 80007f0:	f7ff fe8c 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x20);
 80007f4:	2020      	movs	r0, #32
 80007f6:	f7ff fe89 	bl	800050c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x23);
 80007fa:	2023      	movs	r0, #35	; 0x23
 80007fc:	f7ff fe86 	bl	800050c <LCD_WR_DATA8>

	LCD_WR_REG(0x21);
 8000800:	2021      	movs	r0, #33	; 0x21
 8000802:	f7ff fec7 	bl	8000594 <LCD_WR_REG>

	LCD_WR_REG(0x29);
 8000806:	2029      	movs	r0, #41	; 0x29
 8000808:	f7ff fec4 	bl	8000594 <LCD_WR_REG>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020400 	.word	0x40020400

08000814 <LCD_Fill>:




void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
{          
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4604      	mov	r4, r0
 800081c:	4608      	mov	r0, r1
 800081e:	4611      	mov	r1, r2
 8000820:	461a      	mov	r2, r3
 8000822:	4623      	mov	r3, r4
 8000824:	80fb      	strh	r3, [r7, #6]
 8000826:	4603      	mov	r3, r0
 8000828:	80bb      	strh	r3, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	807b      	strh	r3, [r7, #2]
 800082e:	4613      	mov	r3, r2
 8000830:	803b      	strh	r3, [r7, #0]
	u16 i,j; 
	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);//������ʾ��Χ
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	b299      	uxth	r1, r3
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	3b01      	subs	r3, #1
 800083c:	b29a      	uxth	r2, r3
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	3313      	adds	r3, #19
 8000842:	b29b      	uxth	r3, r3
 8000844:	88f8      	ldrh	r0, [r7, #6]
 8000846:	f7ff febf 	bl	80005c8 <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	e010      	b.n	8000872 <LCD_Fill+0x5e>
	{		
		for(j=xsta;j<xend;j++)
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	81bb      	strh	r3, [r7, #12]
 8000854:	e006      	b.n	8000864 <LCD_Fill+0x50>
		{
			LCD_WR_DATA(color);
 8000856:	8c3b      	ldrh	r3, [r7, #32]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe65 	bl	8000528 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	81bb      	strh	r3, [r7, #12]
 8000864:	89ba      	ldrh	r2, [r7, #12]
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	429a      	cmp	r2, r3
 800086a:	d3f4      	bcc.n	8000856 <LCD_Fill+0x42>
	for(i=ysta;i<yend;i++)
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	3301      	adds	r3, #1
 8000870:	81fb      	strh	r3, [r7, #14]
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3ea      	bcc.n	8000850 <LCD_Fill+0x3c>
		}
	} 					  	    
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}

08000884 <LCD_DrawPoint>:
      ������ݣ�x,y ��������
                color �����ɫ
      ����ֵ��  ��
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y,u16 color)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	80bb      	strh	r3, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	807b      	strh	r3, [r7, #2]

	LCD_Address_Set(x,y,x,y);//���ù��λ��
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	88fa      	ldrh	r2, [r7, #6]
 800089a:	88b9      	ldrh	r1, [r7, #4]
 800089c:	88f8      	ldrh	r0, [r7, #6]
 800089e:	f7ff fe93 	bl	80005c8 <LCD_Address_Set>
	LCD_WR_DATA(color);
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe3f 	bl	8000528 <LCD_WR_DATA>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <LCD_ShowChar>:
                sizey �ֺ�
                mode:  0�ǵ���ģʽ  1����ģʽ
      ����ֵ��  ��
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	80fb      	strh	r3, [r7, #6]
 80008c6:	4603      	mov	r3, r0
 80008c8:	80bb      	strh	r3, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	4613      	mov	r3, r2
 80008d0:	803b      	strh	r3, [r7, #0]
	u8 temp,sizex,t,m=0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	757b      	strb	r3, [r7, #21]
	u16 i,TypefaceNum;//һ���ַ���ռ�ֽڴ�С
	u16 x0=x;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80008da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000904:	b29b      	uxth	r3, r3
 8000906:	fb12 f303 	smulbb	r3, r2, r3
 800090a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //�õ�ƫ�ƺ��ֵ
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	3b20      	subs	r3, #32
 8000910:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //���ù��λ�� 
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	b29a      	uxth	r2, r3
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	4413      	add	r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	3b01      	subs	r3, #1
 800091e:	b29c      	uxth	r4, r3
 8000920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000924:	b29a      	uxth	r2, r3
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	b29b      	uxth	r3, r3
 800092c:	3b01      	subs	r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	88b9      	ldrh	r1, [r7, #4]
 8000932:	88f8      	ldrh	r0, [r7, #6]
 8000934:	4622      	mov	r2, r4
 8000936:	f7ff fe47 	bl	80005c8 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 800093a:	2300      	movs	r3, #0
 800093c:	827b      	strh	r3, [r7, #18]
 800093e:	e086      	b.n	8000a4e <LCD_ShowChar+0x19a>
	{ 
		if(sizey==12)temp=ascii_1206[num][i];		       //����6x12����
 8000940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000944:	2b0c      	cmp	r3, #12
 8000946:	d10b      	bne.n	8000960 <LCD_ShowChar+0xac>
 8000948:	78fa      	ldrb	r2, [r7, #3]
 800094a:	8a79      	ldrh	r1, [r7, #18]
 800094c:	4845      	ldr	r0, [pc, #276]	; (8000a64 <LCD_ShowChar+0x1b0>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4403      	add	r3, r0
 8000958:	440b      	add	r3, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	75fb      	strb	r3, [r7, #23]
 800095e:	e028      	b.n	80009b2 <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //����8x16����
 8000960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000964:	2b10      	cmp	r3, #16
 8000966:	d108      	bne.n	800097a <LCD_ShowChar+0xc6>
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	8a7b      	ldrh	r3, [r7, #18]
 800096c:	493e      	ldr	r1, [pc, #248]	; (8000a68 <LCD_ShowChar+0x1b4>)
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	440a      	add	r2, r1
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	75fb      	strb	r3, [r7, #23]
 8000978:	e01b      	b.n	80009b2 <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //����12x24����
 800097a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800097e:	2b18      	cmp	r3, #24
 8000980:	d10b      	bne.n	800099a <LCD_ShowChar+0xe6>
 8000982:	78fa      	ldrb	r2, [r7, #3]
 8000984:	8a79      	ldrh	r1, [r7, #18]
 8000986:	4839      	ldr	r0, [pc, #228]	; (8000a6c <LCD_ShowChar+0x1b8>)
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	4403      	add	r3, r0
 8000992:	440b      	add	r3, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	75fb      	strb	r3, [r7, #23]
 8000998:	e00b      	b.n	80009b2 <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //����16x32����
 800099a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800099e:	2b20      	cmp	r3, #32
 80009a0:	d15b      	bne.n	8000a5a <LCD_ShowChar+0x1a6>
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	8a7b      	ldrh	r3, [r7, #18]
 80009a6:	4932      	ldr	r1, [pc, #200]	; (8000a70 <LCD_ShowChar+0x1bc>)
 80009a8:	0192      	lsls	r2, r2, #6
 80009aa:	440a      	add	r2, r1
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	75bb      	strb	r3, [r7, #22]
 80009b6:	e044      	b.n	8000a42 <LCD_ShowChar+0x18e>
		{
			if(!mode)//�ǵ���ģʽ
 80009b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d120      	bne.n	8000a02 <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80009c0:	7dfa      	ldrb	r2, [r7, #23]
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	fa42 f303 	asr.w	r3, r2, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <LCD_ShowChar+0x126>
 80009d0:	883b      	ldrh	r3, [r7, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fda8 	bl	8000528 <LCD_WR_DATA>
 80009d8:	e003      	b.n	80009e2 <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 80009da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fda3 	bl	8000528 <LCD_WR_DATA>
				m++;
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	3301      	adds	r3, #1
 80009e6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	7bfa      	ldrb	r2, [r7, #15]
 80009ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80009f0:	fb01 f202 	mul.w	r2, r1, r2
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d11f      	bne.n	8000a3c <LCD_ShowChar+0x188>
				{
					m=0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	757b      	strb	r3, [r7, #21]
					break;
 8000a00:	e022      	b.n	8000a48 <LCD_ShowChar+0x194>
				}
			}
			else//����ģʽ
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//��һ����
 8000a02:	7dfa      	ldrb	r2, [r7, #23]
 8000a04:	7dbb      	ldrb	r3, [r7, #22]
 8000a06:	fa42 f303 	asr.w	r3, r2, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <LCD_ShowChar+0x16a>
 8000a12:	883a      	ldrh	r2, [r7, #0]
 8000a14:	88b9      	ldrh	r1, [r7, #4]
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff33 	bl	8000884 <LCD_DrawPoint>
				x++;
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	3301      	adds	r3, #1
 8000a22:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	8a3b      	ldrh	r3, [r7, #16]
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d105      	bne.n	8000a3c <LCD_ShowChar+0x188>
				{
					x=x0;
 8000a30:	8a3b      	ldrh	r3, [r7, #16]
 8000a32:	80fb      	strh	r3, [r7, #6]
					y++;
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	3301      	adds	r3, #1
 8000a38:	80bb      	strh	r3, [r7, #4]
					break;
 8000a3a:	e005      	b.n	8000a48 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000a3c:	7dbb      	ldrb	r3, [r7, #22]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	75bb      	strb	r3, [r7, #22]
 8000a42:	7dbb      	ldrb	r3, [r7, #22]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d9b7      	bls.n	80009b8 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000a48:	8a7b      	ldrh	r3, [r7, #18]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	827b      	strh	r3, [r7, #18]
 8000a4e:	8a7a      	ldrh	r2, [r7, #18]
 8000a50:	89bb      	ldrh	r3, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f4ff af74 	bcc.w	8000940 <LCD_ShowChar+0x8c>
 8000a58:	e000      	b.n	8000a5c <LCD_ShowChar+0x1a8>
		else return;
 8000a5a:	bf00      	nop
				}
			}
		}
	}   	 	  
}
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	0800387c 	.word	0x0800387c
 8000a68:	08003cf0 	.word	0x08003cf0
 8000a6c:	080042e0 	.word	0x080042e0
 8000a70:	080054b0 	.word	0x080054b0

08000a74 <LCD_ShowString>:
                sizey �ֺ�
                mode:  0�ǵ���ģʽ  1����ģʽ
      ����ֵ��  ��
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
{         
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	60ba      	str	r2, [r7, #8]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4603      	mov	r3, r0
 8000a80:	81fb      	strh	r3, [r7, #14]
 8000a82:	460b      	mov	r3, r1
 8000a84:	81bb      	strh	r3, [r7, #12]
 8000a86:	4613      	mov	r3, r2
 8000a88:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 8000a8a:	e01a      	b.n	8000ac2 <LCD_ShowString+0x4e>
	{       
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	88fc      	ldrh	r4, [r7, #6]
 8000a92:	89b9      	ldrh	r1, [r7, #12]
 8000a94:	89f8      	ldrh	r0, [r7, #14]
 8000a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	8c3b      	ldrh	r3, [r7, #32]
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	f7ff ff04 	bl	80008b4 <LCD_ShowChar>
		x+=sizey/2;
 8000aac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	4413      	add	r3, r2
 8000aba:	81fb      	strh	r3, [r7, #14]
		p++;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e0      	bne.n	8000a8c <LCD_ShowString+0x18>
	}  
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}

08000ad4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ad8:	b08d      	sub	sp, #52	; 0x34
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	6039      	str	r1, [r7, #0]
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	466b      	mov	r3, sp
 8000ae4:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000af2:	d202      	bcs.n	8000afa <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af8:	e002      	b.n	8000b00 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8000afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2104      	movs	r1, #4
 8000b04:	4848      	ldr	r0, [pc, #288]	; (8000c28 <ILI9341_Draw_Colour_Burst+0x154>)
 8000b06:	f001 fb4d 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4846      	ldr	r0, [pc, #280]	; (8000c28 <ILI9341_Draw_Colour_Burst+0x154>)
 8000b10:	f001 fb48 	bl	80021a4 <HAL_GPIO_WritePin>

	unsigned char MSB_color = Colour >> 8;
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	unsigned char burst_buffer[Buffer_Size];
 8000b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b20:	460b      	mov	r3, r1
 8000b22:	3b01      	subs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	2300      	movs	r3, #0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b40:	2300      	movs	r3, #0
 8000b42:	460c      	mov	r4, r1
 8000b44:	461d      	mov	r5, r3
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	00eb      	lsls	r3, r5, #3
 8000b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b54:	00e2      	lsls	r2, r4, #3
 8000b56:	1dcb      	adds	r3, r1, #7
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b60:	466b      	mov	r3, sp
 8000b62:	3300      	adds	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b6a:	e00e      	b.n	8000b8a <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = MSB_color;
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b70:	4413      	add	r3, r2
 8000b72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b76:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	88fa      	ldrh	r2, [r7, #6]
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	3302      	adds	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3ec      	bcc.n	8000b6c <ILI9341_Draw_Colour_Burst+0x98>
	}

	uint32_t Sending_Size = Size * 2;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba0:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bac:	fb01 f202 	mul.w	r2, r1, r2
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d018      	beq.n	8000bec <ILI9341_Draw_Colour_Burst+0x118>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbe:	e011      	b.n	8000be4 <ILI9341_Draw_Colour_Burst+0x110>
		{
			SPI2_TX_completed_flag = 0;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <ILI9341_Draw_Colour_Burst+0x158>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	69b9      	ldr	r1, [r7, #24]
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <ILI9341_Draw_Colour_Burst+0x15c>)
 8000bd0:	f002 fae2 	bl	8003198 <HAL_SPI_Transmit_DMA>
			while (SPI2_TX_completed_flag == 0);
 8000bd4:	bf00      	nop
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <ILI9341_Draw_Colour_Burst+0x158>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0fb      	beq.n	8000bd6 <ILI9341_Draw_Colour_Burst+0x102>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	3301      	adds	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
 8000be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3e9      	bcc.n	8000bc0 <ILI9341_Draw_Colour_Burst+0xec>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00e      	beq.n	8000c10 <ILI9341_Draw_Colour_Burst+0x13c>
	{
		SPI2_TX_completed_flag = 0;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <ILI9341_Draw_Colour_Burst+0x158>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	69b9      	ldr	r1, [r7, #24]
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <ILI9341_Draw_Colour_Burst+0x15c>)
 8000c02:	f002 fac9 	bl	8003198 <HAL_SPI_Transmit_DMA>
		while (SPI2_TX_completed_flag == 0);
 8000c06:	bf00      	nop
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <ILI9341_Draw_Colour_Burst+0x158>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0fb      	beq.n	8000c08 <ILI9341_Draw_Colour_Burst+0x134>
	}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <ILI9341_Draw_Colour_Burst+0x154>)
 8000c16:	f001 fac5 	bl	80021a4 <HAL_GPIO_WritePin>
 8000c1a:	46b5      	mov	sp, r6
}
 8000c1c:	bf00      	nop
 8000c1e:	3734      	adds	r7, #52	; 0x34
 8000c20:	46bd      	mov	sp, r7
 8000c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c26:	bf00      	nop
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	2000004c 	.word	0x2000004c

08000c34 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	LCD_Address_Set(0, 0+OFFSET_Y, LCD_W-1, LCD_H-1+OFFSET_Y);
 8000c3e:	f240 132b 	movw	r3, #299	; 0x12b
 8000c42:	22ef      	movs	r2, #239	; 0xef
 8000c44:	2114      	movs	r1, #20
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fcbe 	bl	80005c8 <LCD_Address_Set>
	ILI9341_Draw_Colour_Burst(Colour, LCD_W * LCD_H);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4904      	ldr	r1, [pc, #16]	; (8000c60 <ILI9341_Fill_Screen+0x2c>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff3f 	bl	8000ad4 <ILI9341_Draw_Colour_Burst>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	00010680 	.word	0x00010680

08000c64 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	SPI2_TX_completed_flag = 1;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_SPI_TxCpltCallback+0x1c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 fbcd 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f909 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 fa21 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c96:	f000 f9ff 	bl	8001098 <MX_DMA_Init>
  MX_RTC_Init();
 8000c9a:	f000 f96d 	bl	8000f78 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c9e:	f000 f9c5 	bl	800102c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000ca2:	f7ff fce1 	bl	8000668 <LCD_Init>
  	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 fc30 	bl	800150c <HAL_Delay>
  	LCD_Set_Light(50);
 8000cac:	2032      	movs	r0, #50	; 0x32
 8000cae:	f7ff fcb7 	bl	8000620 <LCD_Set_Light>
  	LCD_ShowString(72,LCD_H/2,(uint8_t*)"Welcome!",WHITE,BLACK,24,0);//12*6,16*8,24*12,32*16
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2318      	movs	r3, #24
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	4a76      	ldr	r2, [pc, #472]	; (8000e9c <main+0x218>)
 8000cc4:	218c      	movs	r1, #140	; 0x8c
 8000cc6:	2048      	movs	r0, #72	; 0x48
 8000cc8:	f7ff fed4 	bl	8000a74 <LCD_ShowString>
  	LCD_ShowString(42,LCD_H/2+48,(uint8_t*)"OV-Watch V2.3",WHITE,BLACK,24,0);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2318      	movs	r3, #24
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cdc:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <main+0x21c>)
 8000cde:	21bc      	movs	r1, #188	; 0xbc
 8000ce0:	202a      	movs	r0, #42	; 0x2a
 8000ce2:	f7ff fec7 	bl	8000a74 <LCD_ShowString>
  	HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	f000 fc0f 	bl	800150c <HAL_Delay>
  	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000cf6:	22f0      	movs	r2, #240	; 0xf0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fd8a 	bl	8000814 <LCD_Fill>
  	LCD_Fill(0,LCD_H/2-24,LCD_W,LCD_H/2+49,GREEN);
 8000d00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	23bd      	movs	r3, #189	; 0xbd
 8000d08:	22f0      	movs	r2, #240	; 0xf0
 8000d0a:	2174      	movs	r1, #116	; 0x74
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fd81 	bl	8000814 <LCD_Fill>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILI9341_Fill_Screen(WHITE);
 8000d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d16:	f7ff ff8d 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(BLUE);
 8000d1a:	201f      	movs	r0, #31
 8000d1c:	f7ff ff8a 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(BRED);
 8000d20:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000d24:	f7ff ff86 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(GRED);
 8000d28:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000d2c:	f7ff ff82 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(GBLUE);
 8000d30:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000d34:	f7ff ff7e 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(RED);
 8000d38:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000d3c:	f7ff ff7a 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(MAGENTA);
 8000d40:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000d44:	f7ff ff76 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(GREEN);
 8000d48:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000d4c:	f7ff ff72 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(CYAN);
 8000d50:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000d54:	f7ff ff6e 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(YELLOW);
 8000d58:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000d5c:	f7ff ff6a 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(BROWN);
 8000d60:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8000d64:	f7ff ff66 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(BRRED);
 8000d68:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8000d6c:	f7ff ff62 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(GRAY);
 8000d70:	f248 4030 	movw	r0, #33840	; 0x8430
 8000d74:	f7ff ff5e 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(DARKBLUE);
 8000d78:	f240 10cf 	movw	r0, #463	; 0x1cf
 8000d7c:	f7ff ff5a 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(LIGHTBLUE);
 8000d80:	f647 507c 	movw	r0, #32124	; 0x7d7c
 8000d84:	f7ff ff56 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(LGRAY);
 8000d88:	f24c 6018 	movw	r0, #50712	; 0xc618
 8000d8c:	f7ff ff52 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(LGRAYBLUE);
 8000d90:	f24a 6051 	movw	r0, #42577	; 0xa651
 8000d94:	f7ff ff4e 	bl	8000c34 <ILI9341_Fill_Screen>
	  	  ILI9341_Fill_Screen(LBBLUE);
 8000d98:	f642 3012 	movw	r0, #11026	; 0x2b12
 8000d9c:	f7ff ff4a 	bl	8000c34 <ILI9341_Fill_Screen>

	  	  ILI9341_Fill_Screen(WHITE);HAL_Delay(200);
 8000da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000da4:	f7ff ff46 	bl	8000c34 <ILI9341_Fill_Screen>
 8000da8:	20c8      	movs	r0, #200	; 0xc8
 8000daa:	f000 fbaf 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(BLUE);HAL_Delay(200);
 8000dae:	201f      	movs	r0, #31
 8000db0:	f7ff ff40 	bl	8000c34 <ILI9341_Fill_Screen>
 8000db4:	20c8      	movs	r0, #200	; 0xc8
 8000db6:	f000 fba9 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(BRED);HAL_Delay(200);
 8000dba:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000dbe:	f7ff ff39 	bl	8000c34 <ILI9341_Fill_Screen>
 8000dc2:	20c8      	movs	r0, #200	; 0xc8
 8000dc4:	f000 fba2 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(GRED);HAL_Delay(200);
 8000dc8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000dcc:	f7ff ff32 	bl	8000c34 <ILI9341_Fill_Screen>
 8000dd0:	20c8      	movs	r0, #200	; 0xc8
 8000dd2:	f000 fb9b 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(GBLUE);HAL_Delay(200);
 8000dd6:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000dda:	f7ff ff2b 	bl	8000c34 <ILI9341_Fill_Screen>
 8000dde:	20c8      	movs	r0, #200	; 0xc8
 8000de0:	f000 fb94 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(RED);HAL_Delay(200);
 8000de4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000de8:	f7ff ff24 	bl	8000c34 <ILI9341_Fill_Screen>
 8000dec:	20c8      	movs	r0, #200	; 0xc8
 8000dee:	f000 fb8d 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(MAGENTA);HAL_Delay(200);
 8000df2:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000df6:	f7ff ff1d 	bl	8000c34 <ILI9341_Fill_Screen>
 8000dfa:	20c8      	movs	r0, #200	; 0xc8
 8000dfc:	f000 fb86 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(GREEN);HAL_Delay(200);
 8000e00:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000e04:	f7ff ff16 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e08:	20c8      	movs	r0, #200	; 0xc8
 8000e0a:	f000 fb7f 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(CYAN);HAL_Delay(200);
 8000e0e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000e12:	f7ff ff0f 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e16:	20c8      	movs	r0, #200	; 0xc8
 8000e18:	f000 fb78 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(YELLOW);HAL_Delay(200);
 8000e1c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000e20:	f7ff ff08 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e24:	20c8      	movs	r0, #200	; 0xc8
 8000e26:	f000 fb71 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(BROWN);HAL_Delay(200);
 8000e2a:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8000e2e:	f7ff ff01 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e32:	20c8      	movs	r0, #200	; 0xc8
 8000e34:	f000 fb6a 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(BRRED);HAL_Delay(200);
 8000e38:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8000e3c:	f7ff fefa 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e40:	20c8      	movs	r0, #200	; 0xc8
 8000e42:	f000 fb63 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(GRAY);HAL_Delay(200);
 8000e46:	f248 4030 	movw	r0, #33840	; 0x8430
 8000e4a:	f7ff fef3 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e4e:	20c8      	movs	r0, #200	; 0xc8
 8000e50:	f000 fb5c 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(DARKBLUE);HAL_Delay(200);
 8000e54:	f240 10cf 	movw	r0, #463	; 0x1cf
 8000e58:	f7ff feec 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e5c:	20c8      	movs	r0, #200	; 0xc8
 8000e5e:	f000 fb55 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(LIGHTBLUE);HAL_Delay(200);
 8000e62:	f647 507c 	movw	r0, #32124	; 0x7d7c
 8000e66:	f7ff fee5 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e6a:	20c8      	movs	r0, #200	; 0xc8
 8000e6c:	f000 fb4e 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(LGRAY);HAL_Delay(200);
 8000e70:	f24c 6018 	movw	r0, #50712	; 0xc618
 8000e74:	f7ff fede 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e78:	20c8      	movs	r0, #200	; 0xc8
 8000e7a:	f000 fb47 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(LGRAYBLUE);HAL_Delay(200);
 8000e7e:	f24a 6051 	movw	r0, #42577	; 0xa651
 8000e82:	f7ff fed7 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e86:	20c8      	movs	r0, #200	; 0xc8
 8000e88:	f000 fb40 	bl	800150c <HAL_Delay>
	  	  ILI9341_Fill_Screen(LBBLUE);HAL_Delay(200);
 8000e8c:	f642 3012 	movw	r0, #11026	; 0x2b12
 8000e90:	f7ff fed0 	bl	8000c34 <ILI9341_Fill_Screen>
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 fb39 	bl	800150c <HAL_Delay>
	  ILI9341_Fill_Screen(WHITE);
 8000e9a:	e73a      	b.n	8000d12 <main+0x8e>
 8000e9c:	08003860 	.word	0x08003860
 8000ea0:	0800386c 	.word	0x0800386c

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc9c 	bl	80037f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f00:	2309      	movs	r3, #9
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f953 	bl	80021d8 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f38:	f000 f920 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2103      	movs	r1, #3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fbb5 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f64:	f000 f90a 	bl	800117c <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3750      	adds	r7, #80	; 0x50
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <MX_RTC_Init+0xac>)
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <MX_RTC_Init+0xb0>)
 8000f94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_RTC_Init+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_RTC_Init+0xac>)
 8000f9e:	227f      	movs	r2, #127	; 0x7f
 8000fa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_RTC_Init+0xac>)
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_RTC_Init+0xac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_RTC_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_RTC_Init+0xac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <MX_RTC_Init+0xac>)
 8000fbc:	f001 fe20 	bl	8002c00 <HAL_RTC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 f8d9 	bl	800117c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x6;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <MX_RTC_Init+0xac>)
 8000fe6:	f001 fe8e 	bl	8002d06 <HAL_RTC_SetTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f8c4 	bl	800117c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001000:	2300      	movs	r3, #0
 8001002:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_RTC_Init+0xac>)
 800100c:	f001 ff15 	bl	8002e3a <HAL_RTC_SetDate>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001016:	f000 f8b1 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000002c 	.word	0x2000002c
 8001028:	40002800 	.word	0x40002800

0800102c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_SPI1_Init+0x64>)
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_SPI1_Init+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI1_Init+0x64>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x64>)
 800104c:	2202      	movs	r2, #2
 800104e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x64>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x64>)
 8001078:	220a      	movs	r2, #10
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_SPI1_Init+0x64>)
 800107e:	f002 f801 	bl	8003084 <HAL_SPI_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001088:	f000 f878 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000004c 	.word	0x2000004c
 8001094:	40013000 	.word	0x40013000

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	203b      	movs	r0, #59	; 0x3b
 80010c0:	f000 fb23 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010c4:	203b      	movs	r0, #59	; 0x3b
 80010c6:	f000 fb3c 	bl	8001742 <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_GPIO_Init+0x9c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <MX_GPIO_Init+0x9c>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_GPIO_Init+0x9c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_GPIO_Init+0x9c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <MX_GPIO_Init+0x9c>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_GPIO_Init+0x9c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_GPIO_Init+0x9c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <MX_GPIO_Init+0x9c>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_GPIO_Init+0x9c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RES_Pin|DC_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f241 0107 	movw	r1, #4103	; 0x1007
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0xa0>)
 800114a:	f001 f82b 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RES_Pin DC_Pin PB12 */
  GPIO_InitStruct.Pin = CS_Pin|RES_Pin|DC_Pin|GPIO_PIN_12;
 800114e:	f241 0307 	movw	r3, #4103	; 0x1007
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0xa0>)
 8001168:	f000 fe98 	bl	8001e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_RTC_MspInit+0x50>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d111      	bne.n	8001220 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001204:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fc08 	bl	8002a20 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001216:	f7ff ffb1 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_RTC_MspInit+0x54>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40002800 	.word	0x40002800
 800122c:	42470e3c 	.word	0x42470e3c

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a34      	ldr	r2, [pc, #208]	; (8001320 <HAL_SPI_MspInit+0xf0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d161      	bne.n	8001316 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 800125c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_SPI_MspInit+0xf4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129a:	2305      	movs	r3, #5
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <HAL_SPI_MspInit+0xf8>)
 80012a6:	f000 fdf9 	bl	8001e9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_SPI_MspInit+0x100>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012b2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012ec:	f000 fa44 	bl	8001778 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80012f6:	f7ff ff41 	bl	800117c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_SPI_MspInit+0xfc>)
 80012fe:	649a      	str	r2, [r3, #72]	; 0x48
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_SPI_MspInit+0xfc>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2023      	movs	r0, #35	; 0x23
 800130c:	f000 f9fd 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001310:	2023      	movs	r0, #35	; 0x23
 8001312:	f000 fa16 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40013000 	.word	0x40013000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	200000a4 	.word	0x200000a4
 8001330:	40026458 	.word	0x40026458

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f8a4 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <SPI1_IRQHandler+0x10>)
 800138e:	f001 ffb5 	bl	80032fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000004c 	.word	0x2000004c

0800139c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA2_Stream3_IRQHandler+0x10>)
 80013a2:	f000 fb11 	bl	80019c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000a4 	.word	0x200000a4

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f002 f9fd 	bl	8003800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fc3d 	bl	8000c84 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001418:	08006c98 	.word	0x08006c98
  ldr r2, =_sbss
 800141c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001420:	20000108 	.word	0x20000108

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f94f 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fe94 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f967 	bl	800175e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f92f 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000004 	.word	0x20000004
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000104 	.word	0x20000104

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000104 	.word	0x20000104

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000000c 	.word	0x2000000c

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff3e 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff31 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff feb6 	bl	80014f4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e099      	b.n	80018c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b4:	e00f      	b.n	80017d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b6:	f7ff fe9d 	bl	80014f4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d908      	bls.n	80017d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e078      	b.n	80018c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e8      	bne.n	80017b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_DMA_Init+0x158>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4313      	orrs	r3, r2
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f023 0307 	bic.w	r3, r3, #7
 8001856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2b04      	cmp	r3, #4
 8001868:	d117      	bne.n	800189a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00e      	beq.n	800189a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fa91 	bl	8001da4 <DMA_CheckFifoParam>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001896:	2301      	movs	r3, #1
 8001898:	e016      	b.n	80018c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fa48 	bl	8001d38 <DMA_CalcBaseAndBitshift>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	223f      	movs	r2, #63	; 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	f010803f 	.word	0xf010803f

080018d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Start_IT+0x26>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e040      	b.n	800197c <HAL_DMA_Start_IT+0xa8>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d12f      	bne.n	800196e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f9da 	bl	8001cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	223f      	movs	r2, #63	; 0x3f
 800192e:	409a      	lsls	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0216 	orr.w	r2, r2, #22
 8001942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e005      	b.n	800197a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001976:	2302      	movs	r3, #2
 8001978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800197a:	7dfb      	ldrb	r3, [r7, #23]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d004      	beq.n	80019a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00c      	b.n	80019bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019d4:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <HAL_DMA_IRQHandler+0x248>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a8e      	ldr	r2, [pc, #568]	; (8001c14 <HAL_DMA_IRQHandler+0x24c>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2208      	movs	r2, #8
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2208      	movs	r2, #8
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2201      	movs	r2, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2201      	movs	r2, #1
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	f043 0202 	orr.w	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2204      	movs	r2, #4
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f043 0204 	orr.w	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d043      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03c      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d018      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d024      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
 8001af6:	e01f      	b.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01b      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
 8001b08:	e016      	b.n	8001b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0208 	bic.w	r2, r2, #8
 8001b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 808f 	beq.w	8001c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8087 	beq.w	8001c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2220      	movs	r2, #32
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d136      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0216 	bic.w	r2, r2, #22
 8001b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_DMA_IRQHandler+0x1da>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0208 	bic.w	r2, r2, #8
 8001bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	223f      	movs	r2, #63	; 0x3f
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d07e      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
        }
        return;
 8001bde:	e079      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d01d      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
 8001c0c:	e02c      	b.n	8001c68 <HAL_DMA_IRQHandler+0x2a0>
 8001c0e:	bf00      	nop
 8001c10:	20000004 	.word	0x20000004
 8001c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e01e      	b.n	8001c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10f      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0210 	bic.w	r2, r2, #16
 8001c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d032      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d022      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2205      	movs	r2, #5
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d307      	bcc.n	8001cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f2      	bne.n	8001c94 <HAL_DMA_IRQHandler+0x2cc>
 8001cae:	e000      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e000      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cd4:	bf00      	nop
    }
  }
}
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d108      	bne.n	8001d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d1a:	e007      	b.n	8001d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3b10      	subs	r3, #16
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <DMA_CalcBaseAndBitshift+0x64>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d909      	bls.n	8001d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d6e:	f023 0303 	bic.w	r3, r3, #3
 8001d72:	1d1a      	adds	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58
 8001d78:	e007      	b.n	8001d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	aaaaaaab 	.word	0xaaaaaaab
 8001da0:	08006c80 	.word	0x08006c80

08001da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11f      	bne.n	8001dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d856      	bhi.n	8001e72 <DMA_CheckFifoParam+0xce>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <DMA_CheckFifoParam+0x28>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001def 	.word	0x08001def
 8001dd4:	08001ddd 	.word	0x08001ddd
 8001dd8:	08001e73 	.word	0x08001e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d046      	beq.n	8001e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dec:	e043      	b.n	8001e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df6:	d140      	bne.n	8001e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfc:	e03d      	b.n	8001e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e06:	d121      	bne.n	8001e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d837      	bhi.n	8001e7e <DMA_CheckFifoParam+0xda>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <DMA_CheckFifoParam+0x70>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e2b 	.word	0x08001e2b
 8001e1c:	08001e25 	.word	0x08001e25
 8001e20:	08001e3d 	.word	0x08001e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      break;
 8001e28:	e030      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d025      	beq.n	8001e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3a:	e022      	b.n	8001e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e4a:	e01c      	b.n	8001e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d903      	bls.n	8001e5a <DMA_CheckFifoParam+0xb6>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d003      	beq.n	8001e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e58:	e018      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5e:	e015      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e70:	e00b      	b.n	8001e8a <DMA_CheckFifoParam+0xe6>
      break;
 8001e72:	bf00      	nop
 8001e74:	e00a      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e008      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e006      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e004      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e159      	b.n	800216c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8148 	bne.w	8002166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a2 	beq.w	8002166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x202>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1fe>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_GPIO_Init+0x2f8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1fa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_GPIO_Init+0x2fc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1f6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_GPIO_Init+0x300>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1f2>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800208e:	2307      	movs	r3, #7
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f aea2 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e267      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e242      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a75      	ldr	r2, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b70      	ldr	r3, [pc, #448]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6f      	ldr	r2, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6c      	ldr	r2, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff f930 	bl	80014f4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff f92c 	bl	80014f4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e207      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f91c 	bl	80014f4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff f918 	bl	80014f4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1f3      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1c7      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7ff f8d1 	bl	80014f4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff f8cd 	bl	80014f4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1a8      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4925      	ldr	r1, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f8b0 	bl	80014f4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff f8ac 	bl	80014f4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e187      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff f890 	bl	80014f4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff f88c 	bl	80014f4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e167      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff f879 	bl	80014f4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e00e      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff f875 	bl	80014f4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d907      	bls.n	8002424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e150      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002418:	40023800 	.word	0x40023800
 800241c:	42470000 	.word	0x42470000
 8002420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ea      	bne.n	8002406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8097 	beq.w	800256c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b77      	ldr	r3, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x474>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a73      	ldr	r2, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7ff f835 	bl	80014f4 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7ff f831 	bl	80014f4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e10c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x474>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2ea>
 80024b4:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x30c>
 80024ca:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a5e      	ldr	r2, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024e4:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4b55      	ldr	r3, [pc, #340]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 0304 	bic.w	r3, r3, #4
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fff6 	bl	80014f4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fff2 	bl	80014f4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0cb      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ee      	beq.n	800250c <HAL_RCC_OscConfig+0x334>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe ffe0 	bl	80014f4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe ffdc 	bl	80014f4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0b5      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a1 	beq.w	80026b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d05c      	beq.n	800263c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d141      	bne.n	800260e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe ffb0 	bl	80014f4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe ffac 	bl	80014f4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e087      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe ff85 	bl	80014f4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe ff81 	bl	80014f4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e05c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x416>
 800260c:	e054      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe ff6e 	bl	80014f4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe ff6a 	bl	80014f4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e045      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e038      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
 8002650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d028      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d121      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268c:	4293      	cmp	r3, r2
 800268e:	d111      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fe9c 	bl	80014f4 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fe98 	bl	80014f4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fdfc 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08006c70 	.word	0x08006c70
 800288c:	20000004 	.word	0x20000004
 8002890:	20000008 	.word	0x20000008

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b090      	sub	sp, #64	; 0x40
 800289a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d00d      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	f200 80a1 	bhi.w	8002a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x3a>
 80028c6:	e09b      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028cc:	e09b      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d2:	e098      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d028      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	2200      	movs	r2, #0
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	627a      	str	r2, [r7, #36]	; 0x24
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028fc:	2100      	movs	r1, #0
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002900:	fb03 f201 	mul.w	r2, r3, r1
 8002904:	2300      	movs	r3, #0
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	4413      	add	r3, r2
 800290c:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800290e:	fba0 1202 	umull	r1, r2, r0, r2
 8002912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002914:	460a      	mov	r2, r1
 8002916:	62ba      	str	r2, [r7, #40]	; 0x28
 8002918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291a:	4413      	add	r3, r2
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	2200      	movs	r2, #0
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	61fa      	str	r2, [r7, #28]
 8002926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800292e:	f7fd fc53 	bl	80001d8 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4613      	mov	r3, r2
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293a:	e053      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	617a      	str	r2, [r7, #20]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800294e:	f04f 0b00 	mov.w	fp, #0
 8002952:	4652      	mov	r2, sl
 8002954:	465b      	mov	r3, fp
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ebb2 080a 	subs.w	r8, r2, sl
 800296e:	eb63 090b 	sbc.w	r9, r3, fp
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800297e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002986:	ebb2 0408 	subs.w	r4, r2, r8
 800298a:	eb63 0509 	sbc.w	r5, r3, r9
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	00eb      	lsls	r3, r5, #3
 8002998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299c:	00e2      	lsls	r2, r4, #3
 800299e:	4614      	mov	r4, r2
 80029a0:	461d      	mov	r5, r3
 80029a2:	eb14 030a 	adds.w	r3, r4, sl
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	eb45 030b 	adc.w	r3, r5, fp
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ba:	4629      	mov	r1, r5
 80029bc:	028b      	lsls	r3, r1, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c4:	4621      	mov	r1, r4
 80029c6:	028a      	lsls	r2, r1, #10
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	2200      	movs	r2, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	60fa      	str	r2, [r7, #12]
 80029d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d8:	f7fd fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029fe:	e002      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3740      	adds	r7, #64	; 0x40
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	017d7840 	.word	0x017d7840

08002a20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d038      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fd51 	bl	80014f4 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a56:	f7fe fd4d 	bl	80014f4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0bd      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	071b      	lsls	r3, r3, #28
 8002a86:	495a      	ldr	r1, [pc, #360]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fd2e 	bl	80014f4 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a9c:	f7fe fd2a 	bl	80014f4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e09a      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aae:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8083 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fd00 	bl	80014f4 <HAL_GetTick>
 8002af4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fcfc 	bl	80014f4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e06c      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02f      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d028      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b4a:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d114      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fcca 	bl	80014f4 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fcc6 	bl	80014f4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e034      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ee      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	4911      	ldr	r1, [pc, #68]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
 8002bae:	e005      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bba:	6093      	str	r3, [r2, #8]
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc8:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7d1a      	ldrb	r2, [r3, #20]
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002be0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	42470068 	.word	0x42470068
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	42470e40 	.word	0x42470e40
 8002bfc:	424711e0 	.word	0x424711e0

08002c00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7f5b      	ldrb	r3, [r3, #29]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fad6 	bl	80011d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d055      	beq.n	8002cec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	22ca      	movs	r2, #202	; 0xca
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2253      	movs	r2, #83	; 0x53
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f99d 	bl	8002f90 <RTC_EnterInitMode>
 8002c56:	4603      	mov	r3, r0
 8002c58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d12c      	bne.n	8002cba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68d2      	ldr	r2, [r2, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9a4 	bl	8002ffe <RTC_ExitInitMode>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d110      	bne.n	8002ce2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cea:	e001      	b.n	8002cf0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d06:	b590      	push	{r4, r7, lr}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	7f1b      	ldrb	r3, [r3, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_RTC_SetTime+0x1c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e087      	b.n	8002e32 <HAL_RTC_SetTime+0x12c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d126      	bne.n	8002d82 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f97b 	bl	8003048 <RTC_ByteToBcd2>
 8002d52:	4603      	mov	r3, r0
 8002d54:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	785b      	ldrb	r3, [r3, #1]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f974 	bl	8003048 <RTC_ByteToBcd2>
 8002d60:	4603      	mov	r3, r0
 8002d62:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d64:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f96c 	bl	8003048 <RTC_ByteToBcd2>
 8002d70:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d72:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	78db      	ldrb	r3, [r3, #3]
 8002d7a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e018      	b.n	8002db4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002da2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002da8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	22ca      	movs	r2, #202	; 0xca
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2253      	movs	r2, #83	; 0x53
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f8e3 	bl	8002f90 <RTC_EnterInitMode>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d120      	bne.n	8002e16 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002de2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f8f6 	bl	8002ffe <RTC_ExitInitMode>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]

  return status;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}

08002e3a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e3a:	b590      	push	{r4, r7, lr}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	7f1b      	ldrb	r3, [r3, #28]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_RTC_SetDate+0x1c>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e071      	b.n	8002f3a <HAL_RTC_SetDate+0x100>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <HAL_RTC_SetDate+0x4c>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	330a      	adds	r3, #10
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11c      	bne.n	8002ec6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f8d9 	bl	8003048 <RTC_ByteToBcd2>
 8002e96:	4603      	mov	r3, r0
 8002e98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f8d2 	bl	8003048 <RTC_ByteToBcd2>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ea8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f8ca 	bl	8003048 <RTC_ByteToBcd2>
 8002eb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002eb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	78db      	ldrb	r3, [r3, #3]
 8002eca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ed2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ed8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22ca      	movs	r2, #202	; 0xca
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2253      	movs	r2, #83	; 0x53
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f84b 	bl	8002f90 <RTC_EnterInitMode>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f12:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f872 	bl	8002ffe <RTC_ExitInitMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]

  return status;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}
	...

08002f44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_RTC_WaitForSynchro+0x48>)
 8002f56:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f58:	f7fe facc 	bl	80014f4 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f5e:	e009      	b.n	8002f74 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f60:	f7fe fac8 	bl	80014f4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6e:	d901      	bls.n	8002f74 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e007      	b.n	8002f84 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	00013f5f 	.word	0x00013f5f

08002f90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d122      	bne.n	8002ff4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fa99 	bl	80014f4 <HAL_GetTick>
 8002fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fc4:	e00c      	b.n	8002fe0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fc6:	f7fe fa95 	bl	80014f4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd4:	d904      	bls.n	8002fe0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <RTC_EnterInitMode+0x64>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1e8      	bne.n	8002fc6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff8b 	bl	8002f44 <HAL_RTC_WaitForSynchro>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003056:	e005      	b.n	8003064 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	3b0a      	subs	r3, #10
 8003062:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b09      	cmp	r3, #9
 8003068:	d8f6      	bhi.n	8003058 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	b2da      	uxtb	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4313      	orrs	r3, r2
 8003076:	b2db      	uxtb	r3, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07b      	b.n	800318e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a6:	d009      	beq.n	80030bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
 80030ae:	e005      	b.n	80030bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f8aa 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	ea42 0103 	orr.w	r1, r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	f003 0104 	and.w	r1, r3, #4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0210 	and.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_SPI_Transmit_DMA+0x20>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e097      	b.n	80032e8 <HAL_SPI_Transmit_DMA+0x150>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d0:	e085      	b.n	80032de <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_Transmit_DMA+0x46>
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031e2:	e07c      	b.n	80032de <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322a:	d10f      	bne.n	800324c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_SPI_Transmit_DMA+0x158>)
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_SPI_Transmit_DMA+0x15c>)
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <HAL_SPI_Transmit_DMA+0x160>)
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2200      	movs	r2, #0
 800326a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4619      	mov	r1, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003282:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003284:	f7fe fb26 	bl	80018d4 <HAL_DMA_Start_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800329e:	e01e      	b.n	80032de <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d007      	beq.n	80032be <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0202 	orr.w	r2, r2, #2
 80032dc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	080035b5 	.word	0x080035b5
 80032f4:	0800350d 	.word	0x0800350d
 80032f8:	080035d1 	.word	0x080035d1

080032fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
    return;
 800333a:	e0ce      	b.n	80034da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_SPI_IRQHandler+0x5e>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
    return;
 8003358:	e0bf      	b.n	80034da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <HAL_SPI_IRQHandler+0x7e>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80b0 	beq.w	80034da <HAL_SPI_IRQHandler+0x1de>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80aa 	beq.w	80034da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d023      	beq.n	80033d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d011      	beq.n	80033c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	e00b      	b.n	80033d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
        return;
 80033d6:	e080      	b.n	80034da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0208 	orr.w	r2, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04f      	beq.n	80034d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003446:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_SPI_IRQHandler+0x168>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d034      	beq.n	80034ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0203 	bic.w	r2, r2, #3
 8003472:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d011      	beq.n	80034a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_SPI_IRQHandler+0x1e4>)
 8003482:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fa7b 	bl	8001984 <HAL_DMA_Abort_IT>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <HAL_SPI_IRQHandler+0x1e4>)
 80034ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fa65 	bl	8001984 <HAL_DMA_Abort_IT>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80034cc:	e003      	b.n	80034d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f812 	bl	80034f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034d4:	e000      	b.n	80034d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80034d6:	bf00      	nop
    return;
 80034d8:	bf00      	nop
  }
}
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08003611 	.word	0x08003611

080034e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800351a:	f7fd ffeb 	bl	80014f4 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	d03b      	beq.n	80035a8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0202 	bic.w	r2, r2, #2
 800354e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	2164      	movs	r1, #100	; 0x64
 8003554:	6978      	ldr	r0, [r7, #20]
 8003556:	f000 f8f7 	bl	8003748 <SPI_EndRxTxTransaction>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7ff ffa9 	bl	80034f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035a6:	e002      	b.n	80035ae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7fd fb5b 	bl	8000c64 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff ff8e 	bl	80034e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0203 	bic.w	r2, r2, #3
 80035ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff78 	bl	80034f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff ff64 	bl	80034f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003648:	f7fd ff54 	bl	80014f4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003658:	f7fd ff4c 	bl	80014f4 <HAL_GetTick>
 800365c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	0d1b      	lsrs	r3, r3, #20
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366e:	e054      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d050      	beq.n	800371a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003678:	f7fd ff3c 	bl	80014f4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	429a      	cmp	r2, r3
 8003686:	d902      	bls.n	800368e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d13d      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800369c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a6:	d111      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d004      	beq.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d107      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d10f      	bne.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e017      	b.n	800373a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3b01      	subs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d19b      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000004 	.word	0x20000004

08003748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2201      	movs	r2, #1
 800375c:	2102      	movs	r1, #2
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ff6a 	bl	8003638 <SPI_WaitFlagStateUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e032      	b.n	80037e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <SPI_EndRxTxTransaction+0xa0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <SPI_EndRxTxTransaction+0xa4>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	0d5b      	lsrs	r3, r3, #21
 8003786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003798:	d112      	bne.n	80037c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff ff47 	bl	8003638 <SPI_WaitFlagStateUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e00f      	b.n	80037e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d0f2      	beq.n	80037c0 <SPI_EndRxTxTransaction+0x78>
 80037da:	e000      	b.n	80037de <SPI_EndRxTxTransaction+0x96>
        break;
 80037dc:	bf00      	nop
  }

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000004 	.word	0x20000004
 80037ec:	165e9f81 	.word	0x165e9f81

080037f0 <memset>:
 80037f0:	4402      	add	r2, r0
 80037f2:	4603      	mov	r3, r0
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d100      	bne.n	80037fa <memset+0xa>
 80037f8:	4770      	bx	lr
 80037fa:	f803 1b01 	strb.w	r1, [r3], #1
 80037fe:	e7f9      	b.n	80037f4 <memset+0x4>

08003800 <__libc_init_array>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4d0d      	ldr	r5, [pc, #52]	; (8003838 <__libc_init_array+0x38>)
 8003804:	4c0d      	ldr	r4, [pc, #52]	; (800383c <__libc_init_array+0x3c>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	2600      	movs	r6, #0
 800380c:	42a6      	cmp	r6, r4
 800380e:	d109      	bne.n	8003824 <__libc_init_array+0x24>
 8003810:	4d0b      	ldr	r5, [pc, #44]	; (8003840 <__libc_init_array+0x40>)
 8003812:	4c0c      	ldr	r4, [pc, #48]	; (8003844 <__libc_init_array+0x44>)
 8003814:	f000 f818 	bl	8003848 <_init>
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	2600      	movs	r6, #0
 800381e:	42a6      	cmp	r6, r4
 8003820:	d105      	bne.n	800382e <__libc_init_array+0x2e>
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	f855 3b04 	ldr.w	r3, [r5], #4
 8003828:	4798      	blx	r3
 800382a:	3601      	adds	r6, #1
 800382c:	e7ee      	b.n	800380c <__libc_init_array+0xc>
 800382e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003832:	4798      	blx	r3
 8003834:	3601      	adds	r6, #1
 8003836:	e7f2      	b.n	800381e <__libc_init_array+0x1e>
 8003838:	08006c90 	.word	0x08006c90
 800383c:	08006c90 	.word	0x08006c90
 8003840:	08006c90 	.word	0x08006c90
 8003844:	08006c94 	.word	0x08006c94

08003848 <_init>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr

08003854 <_fini>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr
