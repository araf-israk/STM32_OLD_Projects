
AGV_button_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d8c  08002d8c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d8c  08002d8c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002da0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002da0  0000410c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000752b  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001683  00000000  00000000  0000b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f25  00000000  00000000  0000d7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008348  00000000  00000000  00023712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e4e6  00000000  00000000  0002ba5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a50  00000000  00000000  000a9f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ab9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d48 	.word	0x08002d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d48 	.word	0x08002d48

0800014c <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	Tx_Data_Uart1[0] = 5;
 8000154:	4b09      	ldr	r3, [pc, #36]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 8000156:	2205      	movs	r2, #5
 8000158:	701a      	strb	r2, [r3, #0]
	Tx_Data_Uart1[1] = 4;
 800015a:	4b08      	ldr	r3, [pc, #32]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 800015c:	2204      	movs	r2, #4
 800015e:	705a      	strb	r2, [r3, #1]
	Tx_Data_Uart1[2] = 3;
 8000160:	4b06      	ldr	r3, [pc, #24]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 8000162:	2203      	movs	r2, #3
 8000164:	709a      	strb	r2, [r3, #2]
	Tx_Data_Uart1[3] = 2;
 8000166:	4b05      	ldr	r3, [pc, #20]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 8000168:	2202      	movs	r2, #2
 800016a:	70da      	strb	r2, [r3, #3]
	Tx_Data_Uart1[4] = 1;
 800016c:	4b03      	ldr	r3, [pc, #12]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 800016e:	2201      	movs	r2, #1
 8000170:	711a      	strb	r2, [r3, #4]
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	200000f8 	.word	0x200000f8

08000180 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (&huart1, Rx_Data_Uart1, sizeof (Rx_Data_Uart1));
 8000188:	2205      	movs	r2, #5
 800018a:	4904      	ldr	r1, [pc, #16]	@ (800019c <HAL_UART_RxCpltCallback+0x1c>)
 800018c:	4804      	ldr	r0, [pc, #16]	@ (80001a0 <HAL_UART_RxCpltCallback+0x20>)
 800018e:	f001 fe8d 	bl	8001eac <HAL_UART_Receive_DMA>
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000100 	.word	0x20000100
 80001a0:	20000028 	.word	0x20000028

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a8:	f000 fb76 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ac:	f000 f822 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b0:	f000 f8b6 	bl	8000320 <MX_GPIO_Init>
  MX_DMA_Init();
 80001b4:	f000 f88e 	bl	80002d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001b8:	f000 f862 	bl	8000280 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */




  HAL_UART_Transmit_DMA(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 80001bc:	2205      	movs	r2, #5
 80001be:	4909      	ldr	r1, [pc, #36]	@ (80001e4 <main+0x40>)
 80001c0:	4809      	ldr	r0, [pc, #36]	@ (80001e8 <main+0x44>)
 80001c2:	f001 fe03 	bl	8001dcc <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA (&huart1, Rx_Data_Uart1, sizeof (Rx_Data_Uart1));
 80001c6:	2205      	movs	r2, #5
 80001c8:	4908      	ldr	r1, [pc, #32]	@ (80001ec <main+0x48>)
 80001ca:	4807      	ldr	r0, [pc, #28]	@ (80001e8 <main+0x44>)
 80001cc:	f001 fe6e 	bl	8001eac <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80001d0:	2104      	movs	r1, #4
 80001d2:	4807      	ldr	r0, [pc, #28]	@ (80001f0 <main+0x4c>)
 80001d4:	f001 f932 	bl	800143c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001dc:	f000 fbbe 	bl	800095c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80001e0:	bf00      	nop
 80001e2:	e7f5      	b.n	80001d0 <main+0x2c>
 80001e4:	200000f8 	.word	0x200000f8
 80001e8:	20000028 	.word	0x20000028
 80001ec:	20000100 	.word	0x20000100
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fd74 	bl	8002cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f001 f92f 	bl	80014a0 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f9aa 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fb9c 	bl	80019a4 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f995 	bl	80005a0 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 8000286:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <MX_USART1_UART_Init+0x50>)
 8000288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 80002a6:	220c      	movs	r2, #12
 80002a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002b6:	4805      	ldr	r0, [pc, #20]	@ (80002cc <MX_USART1_UART_Init+0x4c>)
 80002b8:	f001 fd02 	bl	8001cc0 <HAL_UART_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002c2:	f000 f96d 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000028 	.word	0x20000028
 80002d0:	40013800 	.word	0x40013800

080002d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_DMA_Init+0x48>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <MX_DMA_Init+0x48>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <MX_DMA_Init+0x48>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	200e      	movs	r0, #14
 80002f8:	f000 fc2b 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002fc:	200e      	movs	r0, #14
 80002fe:	f000 fc44 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	200f      	movs	r0, #15
 8000308:	f000 fc23 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800030c:	200f      	movs	r0, #15
 800030e:	f000 fc3c 	bl	8000b8a <HAL_NVIC_EnableIRQ>

}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b47      	ldr	r3, [pc, #284]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a46      	ldr	r2, [pc, #280]	@ (8000454 <MX_GPIO_Init+0x134>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b44      	ldr	r3, [pc, #272]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034c:	4b41      	ldr	r3, [pc, #260]	@ (8000454 <MX_GPIO_Init+0x134>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a40      	ldr	r2, [pc, #256]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b3e      	ldr	r3, [pc, #248]	@ (8000454 <MX_GPIO_Init+0x134>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0320 	and.w	r3, r3, #32
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b3b      	ldr	r3, [pc, #236]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a3a      	ldr	r2, [pc, #232]	@ (8000454 <MX_GPIO_Init+0x134>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b38      	ldr	r3, [pc, #224]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b35      	ldr	r3, [pc, #212]	@ (8000454 <MX_GPIO_Init+0x134>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a34      	ldr	r2, [pc, #208]	@ (8000454 <MX_GPIO_Init+0x134>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <MX_GPIO_Init+0x134>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	482f      	ldr	r0, [pc, #188]	@ (8000458 <MX_GPIO_Init+0x138>)
 800039c:	f001 f836 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2104      	movs	r1, #4
 80003a4:	482d      	ldr	r0, [pc, #180]	@ (800045c <MX_GPIO_Init+0x13c>)
 80003a6:	f001 f831 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b8:	2302      	movs	r3, #2
 80003ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	4619      	mov	r1, r3
 80003c2:	4825      	ldr	r0, [pc, #148]	@ (8000458 <MX_GPIO_Init+0x138>)
 80003c4:	f000 fe9e 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003c8:	231f      	movs	r3, #31
 80003ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003cc:	4b24      	ldr	r3, [pc, #144]	@ (8000460 <MX_GPIO_Init+0x140>)
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4822      	ldr	r0, [pc, #136]	@ (8000464 <MX_GPIO_Init+0x144>)
 80003dc:	f000 fe92 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2302      	movs	r3, #2
 80003ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4819      	ldr	r0, [pc, #100]	@ (800045c <MX_GPIO_Init+0x13c>)
 80003f8:	f000 fe84 	bl	8001104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	2006      	movs	r0, #6
 8000402:	f000 fba6 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000406:	2006      	movs	r0, #6
 8000408:	f000 fbbf 	bl	8000b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	2100      	movs	r1, #0
 8000410:	2007      	movs	r0, #7
 8000412:	f000 fb9e 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000416:	2007      	movs	r0, #7
 8000418:	f000 fbb7 	bl	8000b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2008      	movs	r0, #8
 8000422:	f000 fb96 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000426:	2008      	movs	r0, #8
 8000428:	f000 fbaf 	bl	8000b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	2009      	movs	r0, #9
 8000432:	f000 fb8e 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000436:	2009      	movs	r0, #9
 8000438:	f000 fba7 	bl	8000b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	200a      	movs	r0, #10
 8000442:	f000 fb86 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000446:	200a      	movs	r0, #10
 8000448:	f000 fb9f 	bl	8000b8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010c00 	.word	0x40010c00
 8000460:	10210000 	.word	0x10210000
 8000464:	40010800 	.word	0x40010800

08000468 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d118      	bne.n	80004aa <HAL_GPIO_EXTI_Callback+0x42>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2104      	movs	r1, #4
 800047c:	4845      	ldr	r0, [pc, #276]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x12c>)
 800047e:	f000 ffc5 	bl	800140c <HAL_GPIO_WritePin>
		Tx_Data_Uart1[0] = 0x56;
 8000482:	4b45      	ldr	r3, [pc, #276]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000484:	2256      	movs	r2, #86	@ 0x56
 8000486:	701a      	strb	r2, [r3, #0]
		Tx_Data_Uart1[1] = 0xF1;
 8000488:	4b43      	ldr	r3, [pc, #268]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800048a:	22f1      	movs	r2, #241	@ 0xf1
 800048c:	705a      	strb	r2, [r3, #1]
		Tx_Data_Uart1[2] = 0x0;
 800048e:	4b42      	ldr	r3, [pc, #264]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000490:	2200      	movs	r2, #0
 8000492:	709a      	strb	r2, [r3, #2]
		Tx_Data_Uart1[3] = 0x0;
 8000494:	4b40      	ldr	r3, [pc, #256]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000496:	2200      	movs	r2, #0
 8000498:	70da      	strb	r2, [r3, #3]
		Tx_Data_Uart1[4] = 0x0;
 800049a:	4b3f      	ldr	r3, [pc, #252]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800049c:	2200      	movs	r2, #0
 800049e:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 80004a0:	2205      	movs	r2, #5
 80004a2:	493d      	ldr	r1, [pc, #244]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004a4:	483d      	ldr	r0, [pc, #244]	@ (800059c <HAL_GPIO_EXTI_Callback+0x134>)
 80004a6:	f001 fc5b 	bl	8001d60 <HAL_UART_Transmit_IT>

	}

	if(GPIO_Pin == GPIO_PIN_1){
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d118      	bne.n	80004e2 <HAL_GPIO_EXTI_Callback+0x7a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	4837      	ldr	r0, [pc, #220]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004b6:	f000 ffa9 	bl	800140c <HAL_GPIO_WritePin>
		Tx_Data_Uart1[0] = 0x56;
 80004ba:	4b37      	ldr	r3, [pc, #220]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004bc:	2256      	movs	r2, #86	@ 0x56
 80004be:	701a      	strb	r2, [r3, #0]
		Tx_Data_Uart1[1] = 0xF2;
 80004c0:	4b35      	ldr	r3, [pc, #212]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004c2:	22f2      	movs	r2, #242	@ 0xf2
 80004c4:	705a      	strb	r2, [r3, #1]
		Tx_Data_Uart1[2] = 0x0;
 80004c6:	4b34      	ldr	r3, [pc, #208]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	709a      	strb	r2, [r3, #2]
		Tx_Data_Uart1[3] = 0x0;
 80004cc:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	70da      	strb	r2, [r3, #3]
		Tx_Data_Uart1[4] = 0x0;
 80004d2:	4b31      	ldr	r3, [pc, #196]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 80004d8:	2205      	movs	r2, #5
 80004da:	492f      	ldr	r1, [pc, #188]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004dc:	482f      	ldr	r0, [pc, #188]	@ (800059c <HAL_GPIO_EXTI_Callback+0x134>)
 80004de:	f001 fc3f 	bl	8001d60 <HAL_UART_Transmit_IT>
	}

	if(GPIO_Pin == GPIO_PIN_2){
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d118      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0xb2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	4829      	ldr	r0, [pc, #164]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004ee:	f000 ff8d 	bl	800140c <HAL_GPIO_WritePin>
		Tx_Data_Uart1[0] = 0x56;
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004f4:	2256      	movs	r2, #86	@ 0x56
 80004f6:	701a      	strb	r2, [r3, #0]
		Tx_Data_Uart1[1] = 0xF3;
 80004f8:	4b27      	ldr	r3, [pc, #156]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 80004fa:	22f3      	movs	r2, #243	@ 0xf3
 80004fc:	705a      	strb	r2, [r3, #1]
		Tx_Data_Uart1[2] = 0x0;
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000500:	2200      	movs	r2, #0
 8000502:	709a      	strb	r2, [r3, #2]
		Tx_Data_Uart1[3] = 0x0;
 8000504:	4b24      	ldr	r3, [pc, #144]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000506:	2200      	movs	r2, #0
 8000508:	70da      	strb	r2, [r3, #3]
		Tx_Data_Uart1[4] = 0x0;
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800050c:	2200      	movs	r2, #0
 800050e:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 8000510:	2205      	movs	r2, #5
 8000512:	4921      	ldr	r1, [pc, #132]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000514:	4821      	ldr	r0, [pc, #132]	@ (800059c <HAL_GPIO_EXTI_Callback+0x134>)
 8000516:	f001 fc23 	bl	8001d60 <HAL_UART_Transmit_IT>
	}

	if(GPIO_Pin == GPIO_PIN_3){
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b08      	cmp	r3, #8
 800051e:	d118      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0xea>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2104      	movs	r1, #4
 8000524:	481b      	ldr	r0, [pc, #108]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000526:	f000 ff71 	bl	800140c <HAL_GPIO_WritePin>
		Tx_Data_Uart1[0] = 0x56;
 800052a:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800052c:	2256      	movs	r2, #86	@ 0x56
 800052e:	701a      	strb	r2, [r3, #0]
		Tx_Data_Uart1[1] = 0xF4;
 8000530:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000532:	22f4      	movs	r2, #244	@ 0xf4
 8000534:	705a      	strb	r2, [r3, #1]
		Tx_Data_Uart1[2] = 0x0;
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000538:	2200      	movs	r2, #0
 800053a:	709a      	strb	r2, [r3, #2]
		Tx_Data_Uart1[3] = 0x0;
 800053c:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800053e:	2200      	movs	r2, #0
 8000540:	70da      	strb	r2, [r3, #3]
		Tx_Data_Uart1[4] = 0x0;
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 8000548:	2205      	movs	r2, #5
 800054a:	4913      	ldr	r1, [pc, #76]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800054c:	4813      	ldr	r0, [pc, #76]	@ (800059c <HAL_GPIO_EXTI_Callback+0x134>)
 800054e:	f001 fc07 	bl	8001d60 <HAL_UART_Transmit_IT>
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	2b10      	cmp	r3, #16
 8000556:	d118      	bne.n	800058a <HAL_GPIO_EXTI_Callback+0x122>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2104      	movs	r1, #4
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <HAL_GPIO_EXTI_Callback+0x12c>)
 800055e:	f000 ff55 	bl	800140c <HAL_GPIO_WritePin>
		Tx_Data_Uart1[0] = 0x56;
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000564:	2256      	movs	r2, #86	@ 0x56
 8000566:	701a      	strb	r2, [r3, #0]
		Tx_Data_Uart1[1] = 0xF5;
 8000568:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800056a:	22f5      	movs	r2, #245	@ 0xf5
 800056c:	705a      	strb	r2, [r3, #1]
		Tx_Data_Uart1[2] = 0x0;
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000570:	2200      	movs	r2, #0
 8000572:	709a      	strb	r2, [r3, #2]
		Tx_Data_Uart1[3] = 0x0;
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000576:	2200      	movs	r2, #0
 8000578:	70da      	strb	r2, [r3, #3]
		Tx_Data_Uart1[4] = 0x0;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 800057c:	2200      	movs	r2, #0
 800057e:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&huart1, Tx_Data_Uart1, sizeof (Tx_Data_Uart1));
 8000580:	2205      	movs	r2, #5
 8000582:	4905      	ldr	r1, [pc, #20]	@ (8000598 <HAL_GPIO_EXTI_Callback+0x130>)
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <HAL_GPIO_EXTI_Callback+0x134>)
 8000586:	f001 fbeb 	bl	8001d60 <HAL_UART_Transmit_IT>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010c00 	.word	0x40010c00
 8000598:	200000f8 	.word	0x200000f8
 800059c:	20000028 	.word	0x20000028

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <Error_Handler+0x8>

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_MspInit+0x60>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_MspInit+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a47      	ldr	r2, [pc, #284]	@ (8000748 <HAL_UART_MspInit+0x138>)
 800062c:	4293      	cmp	r3, r2
 800062e:	f040 8086 	bne.w	800073e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000632:	4b46      	ldr	r3, [pc, #280]	@ (800074c <HAL_UART_MspInit+0x13c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a45      	ldr	r2, [pc, #276]	@ (800074c <HAL_UART_MspInit+0x13c>)
 8000638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b43      	ldr	r3, [pc, #268]	@ (800074c <HAL_UART_MspInit+0x13c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b40      	ldr	r3, [pc, #256]	@ (800074c <HAL_UART_MspInit+0x13c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a3f      	ldr	r2, [pc, #252]	@ (800074c <HAL_UART_MspInit+0x13c>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b3d      	ldr	r3, [pc, #244]	@ (800074c <HAL_UART_MspInit+0x13c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4836      	ldr	r0, [pc, #216]	@ (8000750 <HAL_UART_MspInit+0x140>)
 8000678:	f000 fd44 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800067c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	482f      	ldr	r0, [pc, #188]	@ (8000750 <HAL_UART_MspInit+0x140>)
 8000692:	f000 fd37 	bl	8001104 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <HAL_UART_MspInit+0x144>)
 8000698:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <HAL_UART_MspInit+0x148>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069c:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <HAL_UART_MspInit+0x144>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006bc:	2220      	movs	r2, #32
 80006be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006c6:	4823      	ldr	r0, [pc, #140]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006c8:	f000 fa7a 	bl	8000bc0 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80006d2:	f7ff ff65 	bl	80005a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000754 <HAL_UART_MspInit+0x144>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <HAL_UART_MspInit+0x14c>)
 80006e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <HAL_UART_MspInit+0x150>)
 80006e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_UART_MspInit+0x14c>)
 80006ea:	2210      	movs	r2, #16
 80006ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <HAL_UART_MspInit+0x14c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_UART_MspInit+0x14c>)
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006fa:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_UART_MspInit+0x14c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_UART_MspInit+0x14c>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_UART_MspInit+0x14c>)
 8000708:	2220      	movs	r2, #32
 800070a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_UART_MspInit+0x14c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000712:	4812      	ldr	r0, [pc, #72]	@ (800075c <HAL_UART_MspInit+0x14c>)
 8000714:	f000 fa54 	bl	8000bc0 <HAL_DMA_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800071e:	f7ff ff3f 	bl	80005a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <HAL_UART_MspInit+0x14c>)
 8000726:	639a      	str	r2, [r3, #56]	@ 0x38
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <HAL_UART_MspInit+0x14c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2025      	movs	r0, #37	@ 0x25
 8000734:	f000 fa0d 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000738:	2025      	movs	r0, #37	@ 0x25
 800073a:	f000 fa26 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40013800 	.word	0x40013800
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800
 8000754:	20000070 	.word	0x20000070
 8000758:	40020058 	.word	0x40020058
 800075c:	200000b4 	.word	0x200000b4
 8000760:	40020044 	.word	0x40020044

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f8b6 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 fe55 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fe4e 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80007dc:	2004      	movs	r0, #4
 80007de:	f000 fe47 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80007ea:	2008      	movs	r0, #8
 80007ec:	f000 fe40 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80007f8:	2010      	movs	r0, #16
 80007fa:	f000 fe39 	bl	8001470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <DMA1_Channel4_IRQHandler+0x10>)
 800080a:	f000 fb47 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000b4 	.word	0x200000b4

08000818 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <DMA1_Channel5_IRQHandler+0x10>)
 800081e:	f000 fb3d 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000070 	.word	0x20000070

0800082c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <USART1_IRQHandler+0x10>)
 8000832:	f001 fb61 	bl	8001ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000028 	.word	0x20000028

08000840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff fff8 	bl	8000840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000852:	490c      	ldr	r1, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000854:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000868:	4c09      	ldr	r4, [pc, #36]	@ (8000890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 fa43 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fc93 	bl	80001a4 <main>
  bx lr
 800087e:	4770      	bx	lr
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000888:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 800088c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000890:	2000010c 	.word	0x2000010c

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_Init+0x28>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <HAL_Init+0x28>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f947 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff fe7a 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f95f 	bl	8000ba6 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f927 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	@ (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_IncTick+0x1c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_IncTick+0x20>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a03      	ldr	r2, [pc, #12]	@ (8000944 <HAL_IncTick+0x20>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	20000008 	.word	0x20000008
 8000944:	20000108 	.word	0x20000108

08000948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b02      	ldr	r3, [pc, #8]	@ (8000958 <HAL_GetTick+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000108 	.word	0x20000108

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff0 	bl	8000948 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffe0 	bl	8000948 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4906      	ldr	r1, [pc, #24]	@ (8000a3c <__NVIC_EnableIRQ+0x34>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff90 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff2d 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff42 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff90 	bl	8000a94 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5f 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff35 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e043      	b.n	8000c5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <HAL_DMA_Init+0xa8>)
 8000bde:	4413      	add	r3, r2
 8000be0:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <HAL_DMA_Init+0xac>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <HAL_DMA_Init+0xb0>)
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	bffdfff8 	.word	0xbffdfff8
 8000c6c:	cccccccd 	.word	0xcccccccd
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d101      	bne.n	8000c94 <HAL_DMA_Start_IT+0x20>
 8000c90:	2302      	movs	r3, #2
 8000c92:	e04b      	b.n	8000d2c <HAL_DMA_Start_IT+0xb8>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d13a      	bne.n	8000d1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2202      	movs	r2, #2
 8000cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f000 f9eb 	bl	80010a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f042 020e 	orr.w	r2, r2, #14
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e00f      	b.n	8000d0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0204 	bic.w	r2, r2, #4
 8000cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 020a 	orr.w	r2, r2, #10
 8000d0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0201 	orr.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e005      	b.n	8000d2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d26:	2302      	movs	r3, #2
 8000d28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d008      	beq.n	8000d5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e020      	b.n	8000da0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 020e 	bic.w	r2, r2, #14
 8000d6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d005      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e051      	b.n	8000e74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <HAL_DMA_Abort_IT+0xd4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d029      	beq.n	8000e4e <HAL_DMA_Abort_IT+0xa2>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <HAL_DMA_Abort_IT+0xd8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d022      	beq.n	8000e4a <HAL_DMA_Abort_IT+0x9e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	@ (8000e88 <HAL_DMA_Abort_IT+0xdc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_Abort_IT+0x98>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <HAL_DMA_Abort_IT+0xe0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_DMA_Abort_IT+0x92>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <HAL_DMA_Abort_IT+0xe4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00a      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x8c>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_DMA_Abort_IT+0xe8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d102      	bne.n	8000e32 <HAL_DMA_Abort_IT+0x86>
 8000e2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e36:	e00b      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3c:	e008      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e42:	e005      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e48:	e002      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	e000      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <HAL_DMA_Abort_IT+0xec>)
 8000e52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	4798      	blx	r3
    } 
  }
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020008 	.word	0x40020008
 8000e84:	4002001c 	.word	0x4002001c
 8000e88:	40020030 	.word	0x40020030
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40020058 	.word	0x40020058
 8000e94:	4002006c 	.word	0x4002006c
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	2204      	movs	r2, #4
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d04f      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d04a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0204 	bic.w	r2, r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a66      	ldr	r2, [pc, #408]	@ (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d029      	beq.n	8000f4a <HAL_DMA_IRQHandler+0xae>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a65      	ldr	r2, [pc, #404]	@ (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xaa>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a63      	ldr	r2, [pc, #396]	@ (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xa4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a62      	ldr	r2, [pc, #392]	@ (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d012      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x9e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a60      	ldr	r2, [pc, #384]	@ (800109c <HAL_DMA_IRQHandler+0x200>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00a      	beq.n	8000f34 <HAL_DMA_IRQHandler+0x98>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5f      	ldr	r2, [pc, #380]	@ (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_DMA_IRQHandler+0x92>
 8000f28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f2c:	e00e      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f32:	e00b      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000f38:	e008      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f44:	e002      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	e000      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4a55      	ldr	r2, [pc, #340]	@ (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8000f4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8094 	beq.w	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f62:	e08e      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	2202      	movs	r2, #2
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d056      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d051      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 020a 	bic.w	r2, r2, #10
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a38      	ldr	r2, [pc, #224]	@ (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d029      	beq.n	8001002 <HAL_DMA_IRQHandler+0x166>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d022      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x162>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a35      	ldr	r2, [pc, #212]	@ (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01a      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x15c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d012      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x156>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	@ (800109c <HAL_DMA_IRQHandler+0x200>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00a      	beq.n	8000fec <HAL_DMA_IRQHandler+0x150>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d102      	bne.n	8000fe6 <HAL_DMA_IRQHandler+0x14a>
 8000fe0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fe4:	e00e      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fea:	e00b      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff0:	e008      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff6:	e005      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ffc:	e002      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ffe:	2320      	movs	r3, #32
 8001000:	e000      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8001002:	2302      	movs	r3, #2
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8001006:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d034      	beq.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001020:	e02f      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	2208      	movs	r2, #8
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d028      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
    }
  }
  return;
 8001082:	bf00      	nop
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020008 	.word	0x40020008
 8001090:	4002001c 	.word	0x4002001c
 8001094:	40020030 	.word	0x40020030
 8001098:	40020044 	.word	0x40020044
 800109c:	40020058 	.word	0x40020058
 80010a0:	4002006c 	.word	0x4002006c
 80010a4:	40020000 	.word	0x40020000

080010a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d108      	bne.n	80010e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010e6:	e007      	b.n	80010f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e169      	b.n	80013ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8158 	bne.w	80013e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a9a      	ldr	r2, [pc, #616]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d05e      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001140:	4a98      	ldr	r2, [pc, #608]	@ (80013a4 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d875      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001146:	4a98      	ldr	r2, [pc, #608]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d058      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 800114c:	4a96      	ldr	r2, [pc, #600]	@ (80013a8 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d86f      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001152:	4a96      	ldr	r2, [pc, #600]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d052      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001158:	4a94      	ldr	r2, [pc, #592]	@ (80013ac <HAL_GPIO_Init+0x2a8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d869      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800115e:	4a94      	ldr	r2, [pc, #592]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04c      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001164:	4a92      	ldr	r2, [pc, #584]	@ (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d863      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800116a:	4a92      	ldr	r2, [pc, #584]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d046      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001170:	4a90      	ldr	r2, [pc, #576]	@ (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d85d      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d82a      	bhi.n	80011d0 <HAL_GPIO_Init+0xcc>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d859      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <HAL_GPIO_Init+0x80>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011d9 	.word	0x080011d9
 800118c:	080011eb 	.word	0x080011eb
 8001190:	0800122d 	.word	0x0800122d
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	4a79      	ldr	r2, [pc, #484]	@ (80013b8 <HAL_GPIO_Init+0x2b4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e029      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e024      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01f      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e01a      	b.n	8001234 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e013      	b.n	8001234 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e009      	b.n	8001234 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e003      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x130>
          break;
 8001232:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	@ 0xff
 8001238:	d801      	bhi.n	800123e <HAL_GPIO_Init+0x13a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	@ 0xff
 8001248:	d802      	bhi.n	8001250 <HAL_GPIO_Init+0x14c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x152>
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	3b08      	subs	r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	210f      	movs	r1, #15
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	6a39      	ldr	r1, [r7, #32]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b1 	beq.w	80013e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001284:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <HAL_GPIO_Init+0x2c0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d013      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	@ (80013c8 <HAL_GPIO_Init+0x2c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d00d      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <HAL_GPIO_Init+0x2c8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_GPIO_Init+0x2cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001302:	492f      	ldr	r1, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x2bc>)
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	492c      	ldr	r1, [pc, #176]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4928      	ldr	r1, [pc, #160]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001334:	4013      	ands	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4922      	ldr	r1, [pc, #136]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	491e      	ldr	r1, [pc, #120]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4918      	ldr	r1, [pc, #96]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d021      	beq.n	80013d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e021      	b.n	80013e6 <HAL_GPIO_Init+0x2e2>
 80013a2:	bf00      	nop
 80013a4:	10320000 	.word	0x10320000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10220000 	.word	0x10220000
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10110000 	.word	0x10110000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4909      	ldr	r1, [pc, #36]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f ae8e 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	@ 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43d9      	mvns	r1, r3
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	400b      	ands	r3, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	611a      	str	r2, [r3, #16]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ffea 	bl	8000468 <HAL_GPIO_EXTI_Callback>
  }
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e272      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8087 	beq.w	80015ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d00c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014cc:	4b8f      	ldr	r3, [pc, #572]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d112      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
 80014d8:	4b8c      	ldr	r3, [pc, #560]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b89      	ldr	r3, [pc, #548]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06c      	beq.n	80015cc <HAL_RCC_OscConfig+0x12c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d168      	bne.n	80015cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e24c      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x76>
 8001508:	4b80      	ldr	r3, [pc, #512]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a7f      	ldr	r2, [pc, #508]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b7b      	ldr	r3, [pc, #492]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a7a      	ldr	r2, [pc, #488]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b78      	ldr	r3, [pc, #480]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a77      	ldr	r2, [pc, #476]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0xbc>
 8001542:	4b72      	ldr	r3, [pc, #456]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a71      	ldr	r2, [pc, #452]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b6f      	ldr	r3, [pc, #444]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xd4>
 800155c:	4b6b      	ldr	r3, [pc, #428]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6a      	ldr	r2, [pc, #424]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b68      	ldr	r3, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a67      	ldr	r2, [pc, #412]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff f9e4 	bl	8000948 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff f9e0 	bl	8000948 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e200      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xe4>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9d0 	bl	8000948 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff f9cc 	bl	8000948 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1ec      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x10c>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	4b4c      	ldr	r3, [pc, #304]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e6:	4b49      	ldr	r3, [pc, #292]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
 80015f2:	4b46      	ldr	r3, [pc, #280]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b43      	ldr	r3, [pc, #268]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c0      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4939      	ldr	r1, [pc, #228]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_RCC_OscConfig+0x270>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff f985 	bl	8000948 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff f981 	bl	8000948 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1a1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4927      	ldr	r1, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <HAL_RCC_OscConfig+0x270>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f964 	bl	8000948 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff f960 	bl	8000948 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e180      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03a      	beq.n	8001724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d019      	beq.n	80016ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff f944 	bl	8000948 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff f940 	bl	8000948 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e160      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 face 	bl	8001c84 <RCC_Delay>
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f92a 	bl	8000948 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f6:	e00f      	b.n	8001718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff f926 	bl	8000948 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d908      	bls.n	8001718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e146      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	42420000 	.word	0x42420000
 8001714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e9      	bne.n	80016f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a6 	beq.w	800187e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b8b      	ldr	r3, [pc, #556]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10d      	bne.n	800175e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b88      	ldr	r3, [pc, #544]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a87      	ldr	r2, [pc, #540]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b82      	ldr	r3, [pc, #520]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7e      	ldr	r2, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff f8e7 	bl	8000948 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff f8e3 	bl	8000948 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	@ 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e103      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <HAL_RCC_OscConfig+0x4c8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x312>
 80017a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	e02d      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a69      	ldr	r2, [pc, #420]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b67      	ldr	r3, [pc, #412]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a66      	ldr	r2, [pc, #408]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	e01c      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x356>
 80017dc:	4b61      	ldr	r3, [pc, #388]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a60      	ldr	r2, [pc, #384]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x36e>
 80017f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a57      	ldr	r2, [pc, #348]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d015      	beq.n	8001842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f897 	bl	8000948 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f893 	bl	8000948 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0b1      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001834:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ee      	beq.n	800181e <HAL_RCC_OscConfig+0x37e>
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f881 	bl	8000948 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff f87d 	bl	8000948 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e09b      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a3b      	ldr	r2, [pc, #236]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d061      	beq.n	8001958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d146      	bne.n	800192a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f851 	bl	8000948 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f84d 	bl	8000948 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e06d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d0:	d108      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4921      	ldr	r1, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a19      	ldr	r1, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	430b      	orrs	r3, r1
 80018f6:	491b      	ldr	r1, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f821 	bl	8000948 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f81d 	bl	8000948 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x46a>
 8001928:	e035      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_RCC_OscConfig+0x4cc>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f80a 	bl	8000948 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f806 	bl	8000948 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e026      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x498>
 8001956:	e01e      	b.n	8001996 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e019      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_RCC_OscConfig+0x500>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	429a      	cmp	r2, r3
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0d0      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4965      	ldr	r1, [pc, #404]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d040      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e073      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4936      	ldr	r1, [pc, #216]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7fe ff58 	bl	8000948 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7fe ff54 	bl	8000948 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e053      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d210      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <HAL_RCC_ClockConfig+0x1cc>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe feb6 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08002d60 	.word	0x08002d60
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x36>
 8001ba6:	e027      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	613b      	str	r3, [r7, #16]
      break;
 8001bac:	e027      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0c5b      	lsrs	r3, r3, #17
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e004      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	613b      	str	r3, [r7, #16]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	693b      	ldr	r3, [r7, #16]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	007a1200 	.word	0x007a1200
 8001c14:	08002d78 	.word	0x08002d78
 8001c18:	08002d88 	.word	0x08002d88
 8001c1c:	003d0900 	.word	0x003d0900

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b02      	ldr	r3, [pc, #8]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff2 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08002d70 	.word	0x08002d70

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08002d70 	.word	0x08002d70

08001c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <RCC_Delay+0x34>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <RCC_Delay+0x38>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0a5b      	lsrs	r3, r3, #9
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca0:	bf00      	nop
  }
  while (Delay --);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	60fa      	str	r2, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <RCC_Delay+0x1c>
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e042      	b.n	8001d58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fc92 	bl	8000610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	@ 0x24
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 ff65 	bl	8002bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d121      	bne.n	8001dbe <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_UART_Transmit_IT+0x26>
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01a      	b.n	8001dc0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2221      	movs	r2, #33	@ 0x21
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001db8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	@ 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d156      	bne.n	8001e94 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_UART_Transmit_DMA+0x26>
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e04f      	b.n	8001e96 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2221      	movs	r2, #33	@ 0x21
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <HAL_UART_Transmit_DMA+0xd4>)
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e22:	4a20      	ldr	r2, [pc, #128]	@ (8001ea4 <HAL_UART_Transmit_DMA+0xd8>)
 8001e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <HAL_UART_Transmit_DMA+0xdc>)
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	f7fe ff11 	bl	8000c74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3314      	adds	r3, #20
 8001e62:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	e853 3f00 	ldrex	r3, [r3]
 8001e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e7e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e84:	e841 2300 	strex	r3, r2, [r1]
 8001e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e5      	bne.n	8001e5c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08002469 	.word	0x08002469
 8001ea4:	08002503 	.word	0x08002503
 8001ea8:	08002687 	.word	0x08002687

08001eac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d112      	bne.n	8001eec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_UART_Receive_DMA+0x26>
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00b      	b.n	8001eee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fc1a 	bl	800271c <UART_Start_Receive_DMA>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	e000      	b.n	8001eee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0ba      	sub	sp, #232	@ 0xe8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_UART_IRQHandler+0x66>
 8001f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fd7e 	bl	8002a58 <UART_Receive_IT>
      return;
 8001f5c:	e25b      	b.n	8002416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80de 	beq.w	8002124 <HAL_UART_IRQHandler+0x22c>
 8001f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80d1 	beq.w	8002124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xae>
 8001f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_UART_IRQHandler+0xd2>
 8001fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_UART_IRQHandler+0xf6>
 8001fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f043 0204 	orr.w	r2, r3, #4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d011      	beq.n	800201e <HAL_UART_IRQHandler+0x126>
 8001ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d105      	bne.n	8002012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f043 0208 	orr.w	r2, r3, #8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 81f2 	beq.w	800240c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_UART_IRQHandler+0x14e>
 8002034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fd09 	bl	8002a58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HAL_UART_IRQHandler+0x17a>
 800206a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d04f      	beq.n	8002112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fc13 	bl	800289e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d041      	beq.n	800210a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3314      	adds	r3, #20
 800208c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800209c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3314      	adds	r3, #20
 80020ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80020b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80020b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80020be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80020ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1d9      	bne.n	8002086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d013      	beq.n	8002102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020de:	4a7e      	ldr	r2, [pc, #504]	@ (80022d8 <HAL_UART_IRQHandler+0x3e0>)
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fe60 	bl	8000dac <HAL_DMA_Abort_IT>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020fc:	4610      	mov	r0, r2
 80020fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002100:	e00e      	b.n	8002120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f99c 	bl	8002440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	e00a      	b.n	8002120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f998 	bl	8002440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	e006      	b.n	8002120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f994 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800211e:	e175      	b.n	800240c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	bf00      	nop
    return;
 8002122:	e173      	b.n	800240c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	2b01      	cmp	r3, #1
 800212a:	f040 814f 	bne.w	80023cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800212e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8148 	beq.w	80023cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800213c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8141 	beq.w	80023cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80b6 	beq.w	80022dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800217c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8145 	beq.w	8002410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800218a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800218e:	429a      	cmp	r2, r3
 8002190:	f080 813e 	bcs.w	8002410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800219a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	f000 8088 	beq.w	80022b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021b6:	e853 3f00 	ldrex	r3, [r3]
 80021ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80021be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80021d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80021d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80021e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021e4:	e841 2300 	strex	r3, r2, [r1]
 80021e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80021ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1d9      	bne.n	80021a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021fe:	e853 3f00 	ldrex	r3, [r3]
 8002202:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3314      	adds	r3, #20
 8002214:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002218:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800221c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002220:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002224:	e841 2300 	strex	r3, r2, [r1]
 8002228:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800222a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e1      	bne.n	80021f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3314      	adds	r3, #20
 8002236:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800223a:	e853 3f00 	ldrex	r3, [r3]
 800223e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002254:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002256:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002258:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800225a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800225c:	e841 2300 	strex	r3, r2, [r1]
 8002260:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e3      	bne.n	8002230 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002288:	f023 0310 	bic.w	r3, r3, #16
 800228c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800229a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800229c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022a2:	e841 2300 	strex	r3, r2, [r1]
 80022a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80022a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e3      	bne.n	8002276 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd3e 	bl	8000d34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8bf 	bl	8002452 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022d4:	e09c      	b.n	8002410 <HAL_UART_IRQHandler+0x518>
 80022d6:	bf00      	nop
 80022d8:	08002963 	.word	0x08002963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808e 	beq.w	8002414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8089 	beq.w	8002414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	330c      	adds	r3, #12
 8002322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002326:	647a      	str	r2, [r7, #68]	@ 0x44
 8002328:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800232c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800232e:	e841 2300 	strex	r3, r2, [r1]
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e3      	bne.n	8002302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3314      	adds	r3, #20
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	623b      	str	r3, [r7, #32]
   return(result);
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3314      	adds	r3, #20
 800235a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800235e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e3      	bne.n	800233a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	e853 3f00 	ldrex	r3, [r3]
 800238e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0310 	bic.w	r3, r3, #16
 8002396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	330c      	adds	r3, #12
 80023a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80023a4:	61fa      	str	r2, [r7, #28]
 80023a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a8:	69b9      	ldr	r1, [r7, #24]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	e841 2300 	strex	r3, r2, [r1]
 80023b0:	617b      	str	r3, [r7, #20]
   return(result);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e3      	bne.n	8002380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f844 	bl	8002452 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023ca:	e023      	b.n	8002414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_UART_IRQHandler+0x4f4>
 80023d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fad0 	bl	800298a <UART_Transmit_IT>
    return;
 80023ea:	e014      	b.n	8002416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_UART_IRQHandler+0x51e>
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fb0f 	bl	8002a28 <UART_EndTransmit_IT>
    return;
 800240a:	e004      	b.n	8002416 <HAL_UART_IRQHandler+0x51e>
    return;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <HAL_UART_IRQHandler+0x51e>
      return;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <HAL_UART_IRQHandler+0x51e>
      return;
 8002414:	bf00      	nop
  }
}
 8002416:	37e8      	adds	r7, #232	@ 0xe8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b090      	sub	sp, #64	@ 0x40
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d137      	bne.n	80024f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	2200      	movs	r2, #0
 8002488:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800248a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3314      	adds	r3, #20
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	e853 3f00 	ldrex	r3, [r3]
 8002498:	623b      	str	r3, [r7, #32]
   return(result);
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3314      	adds	r3, #20
 80024a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e5      	bne.n	800248a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024de:	61fa      	str	r2, [r7, #28]
 80024e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	617b      	str	r3, [r7, #20]
   return(result);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e5      	bne.n	80024be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024f2:	e002      	b.n	80024fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80024f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80024f6:	f7fd fe29 	bl	800014c <HAL_UART_TxCpltCallback>
}
 80024fa:	bf00      	nop
 80024fc:	3740      	adds	r7, #64	@ 0x40
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff ff83 	bl	800241c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b09c      	sub	sp, #112	@ 0x70
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d172      	bne.n	8002620 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800253a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253c:	2200      	movs	r2, #0
 800253e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	330c      	adds	r3, #12
 8002546:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002556:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002560:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002562:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800256e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3314      	adds	r3, #20
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	e853 3f00 	ldrex	r3, [r3]
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	667b      	str	r3, [r7, #100]	@ 0x64
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002594:	647a      	str	r2, [r7, #68]	@ 0x44
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800259a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	623b      	str	r3, [r7, #32]
   return(result);
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025be:	663b      	str	r3, [r7, #96]	@ 0x60
 80025c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e5      	bne.n	80025a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d119      	bne.n	8002620 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0310 	bic.w	r3, r3, #16
 8002602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800260c:	61fa      	str	r2, [r7, #28]
 800260e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	617b      	str	r3, [r7, #20]
   return(result);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e5      	bne.n	80025ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002622:	2200      	movs	r2, #0
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	2b01      	cmp	r3, #1
 800262c:	d106      	bne.n	800263c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800262e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002632:	4619      	mov	r1, r3
 8002634:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002636:	f7ff ff0c 	bl	8002452 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800263a:	e002      	b.n	8002642 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800263c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800263e:	f7fd fd9f 	bl	8000180 <HAL_UART_RxCpltCallback>
}
 8002642:	bf00      	nop
 8002644:	3770      	adds	r7, #112	@ 0x70
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff feee 	bl	8002452 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002676:	e002      	b.n	800267e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fed8 	bl	800242e <HAL_UART_RxHalfCpltCallback>
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b21      	cmp	r3, #33	@ 0x21
 80026b8:	d108      	bne.n	80026cc <UART_DMAError+0x46>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f000 f8c2 	bl	8002850 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b22      	cmp	r3, #34	@ 0x22
 80026ec:	d108      	bne.n	8002700 <UART_DMAError+0x7a>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80026fa:	68b8      	ldr	r0, [r7, #8]
 80026fc:	f000 f8cf 	bl	800289e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800270c:	68b8      	ldr	r0, [r7, #8]
 800270e:	f7ff fe97 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b098      	sub	sp, #96	@ 0x60
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	@ 0x22
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002748:	4a3e      	ldr	r2, [pc, #248]	@ (8002844 <UART_Start_Receive_DMA+0x128>)
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4a3d      	ldr	r2, [pc, #244]	@ (8002848 <UART_Start_Receive_DMA+0x12c>)
 8002752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	4a3c      	ldr	r2, [pc, #240]	@ (800284c <UART_Start_Receive_DMA+0x130>)
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	2200      	movs	r2, #0
 8002762:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f7fe fa7a 	bl	8000c74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d019      	beq.n	80027d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80027c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e5      	bne.n	800279e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3314      	adds	r3, #20
 80027f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e5      	bne.n	80027d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	617b      	str	r3, [r7, #20]
   return(result);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002826:	627a      	str	r2, [r7, #36]	@ 0x24
 8002828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6a39      	ldr	r1, [r7, #32]
 800282c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	61fb      	str	r3, [r7, #28]
   return(result);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3760      	adds	r7, #96	@ 0x60
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	0800251f 	.word	0x0800251f
 8002848:	0800264b 	.word	0x0800264b
 800284c:	08002687 	.word	0x08002687

08002850 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	60bb      	str	r3, [r7, #8]
   return(result);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	61ba      	str	r2, [r7, #24]
 800287a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6979      	ldr	r1, [r7, #20]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	613b      	str	r3, [r7, #16]
   return(result);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	@ 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b095      	sub	sp, #84	@ 0x54
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e5      	bne.n	80028a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e5      	bne.n	80028da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	2b01      	cmp	r3, #1
 8002914:	d119      	bne.n	800294a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	60bb      	str	r3, [r7, #8]
   return(result);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0310 	bic.w	r3, r3, #16
 800292c:	647b      	str	r3, [r7, #68]	@ 0x44
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002936:	61ba      	str	r2, [r7, #24]
 8002938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	613b      	str	r3, [r7, #16]
   return(result);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002958:	bf00      	nop
 800295a:	3754      	adds	r7, #84	@ 0x54
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd5f 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b21      	cmp	r3, #33	@ 0x21
 800299c:	d13e      	bne.n	8002a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a6:	d114      	bne.n	80029d2 <UART_Transmit_IT+0x48>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d110      	bne.n	80029d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	e008      	b.n	80029e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6211      	str	r1, [r2, #32]
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fd fb7f 	bl	800014c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	@ 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b22      	cmp	r3, #34	@ 0x22
 8002a6a:	f040 80ae 	bne.w	8002bca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a76:	d117      	bne.n	8002aa8 <UART_Receive_IT+0x50>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d113      	bne.n	8002aa8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	1c9a      	adds	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aa6:	e026      	b.n	8002af6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aba:	d007      	beq.n	8002acc <UART_Receive_IT+0x74>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <UART_Receive_IT+0x82>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e008      	b.n	8002aec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d15d      	bne.n	8002bc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0220 	bic.w	r2, r2, #32
 8002b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d135      	bne.n	8002bbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	613b      	str	r3, [r7, #16]
   return(result);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f023 0310 	bic.w	r3, r3, #16
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	623a      	str	r2, [r7, #32]
 8002b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	69f9      	ldr	r1, [r7, #28]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e5      	bne.n	8002b56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d10a      	bne.n	8002bae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fc4c 	bl	8002452 <HAL_UARTEx_RxEventCallback>
 8002bba:	e002      	b.n	8002bc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fd fadf 	bl	8000180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e002      	b.n	8002bcc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c0e:	f023 030c 	bic.w	r3, r3, #12
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <UART_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d103      	bne.n	8002c44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c3c:	f7ff f80e 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	e002      	b.n	8002c4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7fe fff6 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8002c48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <UART_SetConfig+0x118>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	0119      	lsls	r1, r3, #4
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c80:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <UART_SetConfig+0x118>)
 8002c82:	fba3 0302 	umull	r0, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2064      	movs	r0, #100	@ 0x64
 8002c8a:	fb00 f303 	mul.w	r3, r0, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	@ 0x32
 8002c94:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca0:	4419      	add	r1, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <UART_SetConfig+0x118>)
 8002cba:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2064      	movs	r0, #100	@ 0x64
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	@ 0x32
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <UART_SetConfig+0x118>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	440a      	add	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	51eb851f 	.word	0x51eb851f

08002cf0 <memset>:
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4402      	add	r2, r0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memset+0xa>
 8002cf8:	4770      	bx	lr
 8002cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfe:	e7f9      	b.n	8002cf4 <memset+0x4>

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	2600      	movs	r6, #0
 8002d04:	4d0c      	ldr	r5, [pc, #48]	@ (8002d38 <__libc_init_array+0x38>)
 8002d06:	4c0d      	ldr	r4, [pc, #52]	@ (8002d3c <__libc_init_array+0x3c>)
 8002d08:	1b64      	subs	r4, r4, r5
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	f000 f81a 	bl	8002d48 <_init>
 8002d14:	2600      	movs	r6, #0
 8002d16:	4d0a      	ldr	r5, [pc, #40]	@ (8002d40 <__libc_init_array+0x40>)
 8002d18:	4c0a      	ldr	r4, [pc, #40]	@ (8002d44 <__libc_init_array+0x44>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002d8c 	.word	0x08002d8c
 8002d3c:	08002d8c 	.word	0x08002d8c
 8002d40:	08002d8c 	.word	0x08002d8c
 8002d44:	08002d90 	.word	0x08002d90

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
